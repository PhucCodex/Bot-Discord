const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Bot ƒë√£ s·∫µn s√†ng!');
});

app.listen(port, () => {
  console.log(`Server ƒëang l·∫Øng nghe t·∫°i http://localhost:${port}`);
});

// --- TH∆Ø VI·ªÜN C≈® ---
const { Client, GatewayIntentBits, REST, Routes, SlashCommandBuilder, ModalBuilder, TextInputBuilder, ActionRowBuilder, TextInputStyle, EmbedBuilder, ChannelType, PermissionFlagsBits, ButtonBuilder, ButtonStyle, ActivityType, StringSelectMenuBuilder } = require('discord.js');
const ms = require('ms');
require('dotenv').config();

// --- TH∆Ø VI·ªÜN M·ªöI CHO T√çNH NƒÇNG NGHE NH·∫†C ---
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, VoiceConnectionStatus } = require('@discordjs/voice');
const play = require('play-dl');

const Database = require('better-sqlite3');
const db = new Database('/data/data.db');

// --- BI·∫æN TO√ÄN C·ª§C M·ªöI ƒê·ªÇ QU·∫¢N L√ù H√ÄNG ƒê·ª¢I NH·∫†C ---
// S·ª≠ d·ª•ng Map ƒë·ªÉ l∆∞u h√†ng ƒë·ª£i cho m·ªói server, v·ªõi key l√† ID c·ªßa server
const queue = new Map();

// --- C·∫§U H√åNH CHO AUTO-MOD ---
const MOD_LOG_CHANNEL_ID = '1413071939395653722';
const FORBIDDEN_WORDS = ['l·ªìn', 'c·∫∑c', 'badword', 'ngu',];
const TIMEOUT_DURATION = '60m';

// ================================================================= //
// --- C·∫§U H√åNH CHO H·ªÜ TH·ªêNG LEVEL ---
// ================================================================= //
const XP_PER_MESSAGE = 10;
const XP_PER_MINUTE_IN_VOICE = 20;
const DAILY_REWARD = 500; // L∆∞·ª£ng XP nh·∫≠n ƒë∆∞·ª£c t·ª´ /daily
const MESSAGE_COOLDOWN_SECONDS = 60; // Ch·ªù 60 gi√¢y gi·ªØa 2 tin nh·∫Øn ƒë·ªÉ nh·∫≠n XP

// ================================================================= //
// --- VAI TR√í KH√îNG NH·∫¨N XP ---
// ‚ö†Ô∏è THAY ID VAI TR√í B·∫†N MU·ªêN CH·∫∂N NH·∫¨N XP V√ÄO ƒê√ÇY
// ƒê·ªÉ tr·ªëng ('') n·∫øu b·∫°n kh√¥ng mu·ªën d√πng t√≠nh nƒÉng n√†y.
const NO_XP_ROLE_ID = 'YOUR_ROLE_ID_HERE'; 
// ================================================================= //


function setupDatabase() {
    db.exec(`
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT NOT NULL
        )
    `);
    
    db.exec(`
        CREATE TABLE IF NOT EXISTS temp_roles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            userId TEXT NOT NULL,
            guildId TEXT NOT NULL,
            roleId TEXT NOT NULL,
            expiresAt INTEGER NOT NULL
        )
    `);

    db.exec(`
        CREATE TABLE IF NOT EXISTS warnings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            userId TEXT NOT NULL,
            guildId TEXT NOT NULL,
            reason TEXT,
            timestamp INTEGER
        )
    `);
    
    db.exec(`
        CREATE TABLE IF NOT EXISTS user_stats (
            id TEXT PRIMARY KEY,
            userId TEXT NOT NULL,
            guildId TEXT NOT NULL,
            xp INTEGER DEFAULT 0,
            level INTEGER DEFAULT 0,
            lastDaily INTEGER DEFAULT 0,
            voiceJoinTimestamp INTEGER DEFAULT 0,
            UNIQUE(userId, guildId)
        )
    `);

    db.exec(`
        CREATE TABLE IF NOT EXISTS giveaways (
            messageId TEXT PRIMARY KEY,
            channelId TEXT NOT NULL,
            guildId TEXT NOT NULL,
            prize TEXT NOT NULL,
            winnerCount INTEGER NOT NULL,
            endsAt INTEGER NOT NULL,
            hostedBy TEXT NOT NULL,
            ended INTEGER DEFAULT 0
        )
    `);

    const stmt = db.prepare(`INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?)`);
    stmt.run('ticketCounter', '1');

    console.log('‚úÖ Database ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p v√† s·∫µn s√†ng.');
}

setupDatabase();

// --- H·ªÜ TH·ªêNG LEVEL L≈®Y TI·∫æN M·ªöI ---
function calculateLevel(xp) {
    if (xp < 100) return 0;
    const level = Math.floor((-50 + Math.sqrt(2500 + 200 * xp)) / 100);
    return level;
}

function getUserStats(userId, guildId) {
    let user = db.prepare('SELECT * FROM user_stats WHERE userId = ? AND guildId = ?').get(userId, guildId);
    if (!user) {
        const id = `${userId}-${guildId}`;
        db.prepare('INSERT INTO user_stats (id, userId, guildId) VALUES (?, ?, ?)')
          .run(id, userId, guildId);
        user = { id, userId, guildId, xp: 0, level: 0, lastDaily: 0, voiceJoinTimestamp: 0 };
    }
    return user;
}

function updateUserXP(userId, guildId, newXp) {
    const newLevel = calculateLevel(newXp);
    db.prepare('UPDATE user_stats SET xp = ?, level = ? WHERE userId = ? AND guildId = ?')
      .run(newXp, newLevel, userId, guildId);
    return { newXp, newLevel };
}

const DEFAULT_FEEDBACK_CHANNEL_ID = '1128546415250198539';
const SUPPORT_ROLE_ID = '1412090993909563534';    
const WELCOME_CHANNEL_ID = '1406560267214524527';
const GOODBYE_CHANNEL_ID = '1406559808114393121';
const AUTO_ROLE_ID = '1406560015925514290';
const GOODBYE_GIF_URL = 'https://i.pinimg.com/originals/ec/c6/8e/ecc68e64677d55433d833ac1e6a713fd.gif'
const CHAT_CHANNEL_ID = '1408709235478368267';
const SUPPORT_CHANNEL_ID = '1412323492162174988';
const SUPPORT_TICKET_CATEGORY_ID = '1413009121606631456';
const ADMIN_TICKET_CATEGORY_ID = '1413009227156291634';

const commands = [
    // --- C√ÅC L·ªÜNH C≈® GI·ªÆ NGUY√äN ---
    new SlashCommandBuilder()
        .setName('info')
        .setDescription('Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c server.')
        .addSubcommand(subcommand =>
            subcommand
                .setName('user')
                .setDescription('Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng.')
                .addUserOption(option =>
                    option.setName('user')
                        .setDescription('Ng∆∞·ªùi b·∫°n mu·ªën xem th√¥ng tin')
                        .setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('server')
                .setDescription('Hi·ªÉn th·ªã th√¥ng tin v·ªÅ server hi·ªán t·∫°i.')
        ),
    new SlashCommandBuilder()
        .setName('ping')
        .setDescription('Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot'),
    new SlashCommandBuilder()
        .setName('hi1')
        .setDescription('G·ª≠i l·ªùi ch√†o th√¢n th∆∞∆°ng ƒë·∫øn m·ªôt ng∆∞·ªùi ƒë√°ng y√™u.')
        .addUserOption(option =>
            option.setName('ng∆∞·ªùi')
                .setDescription('Ng∆∞·ªùi b·∫°n mu·ªën ch√†o')
                .setRequired(true)
        ),
    new SlashCommandBuilder()
        .setName('hi2')
        .setDescription('G·ª≠i l·ªùi ch√∫c theo bu·ªïi t·ªõi m·ªôt ng∆∞·ªùi d·ªÖ th∆∞∆°ng.')
        .addUserOption(option =>
            option.setName('ng∆∞·ªùi')
                .setDescription('Ng∆∞·ªùi b·∫°n mu·ªën ch√∫c')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('chon_buoi')
                .setDescription('Ch·ªçn m·ªôt bu·ªïi c√≥ s·∫µn trong ng√†y.')
                .setRequired(false)
                .addChoices(
                    { name: '‚òÄÔ∏è Bu·ªïi S√°ng', value: 's√°ng' },
                    { name: 'üïõ Bu·ªïi Tr∆∞a', value: 'tr∆∞a' },
                    { name: 'üåá Bu·ªïi Chi·ªÅu', value: 'chi·ªÅu' },
                    { name: 'üåô Bu·ªïi T·ªëi', value: 't·ªëi' }
                )
        )
        .addStringOption(option =>
            option.setName('loi_chuc')
                .setDescription('Ho·∫∑c t·ª± nh·∫≠p m·ªôt l·ªùi ch√∫c ri√™ng.')
                .setRequired(false)
        ),
    new SlashCommandBuilder()
        .setName('time')
        .setDescription('Xem th·ªùi gian hi·ªán t·∫°i ·ªü c√°c qu·ªëc gia')
        .addStringOption(option =>
            option.setName('quoc_gia')
                .setDescription('Ch·ªçn qu·ªëc gia mu·ªën xem gi·ªù.')
                .setRequired(false)
                .addChoices(
                    { name: 'üáªüá≥ Vi·ªát Nam', value: 'Asia/Ho_Chi_Minh' },
                    { name: 'üáØüáµ Nh·∫≠t B·∫£n', value: 'Asia/Tokyo' },
                    { name: 'üáπüáº ƒê√†i Loan', value: 'Asia/Taipei' },
                    { name: 'üáπüá≠ Th√°i Lan', value: 'Asia/Bangkok' },
                    { name: 'üá∫üá∏ B·ªù T√¢y Hoa K·ª≥ (Los Angeles, San Francisco)', value: 'America/Los_Angeles' },
                    { name: 'üá∑üá∫ Nga (Moscow)', value: 'Europe/Moscow' },
                    { name: 'üá¨üáß V∆∞∆°ng qu·ªëc Anh', value: 'Europe/London' }
                )
        ),
    new SlashCommandBuilder()
        .setName('feedback')
        .setDescription('M·ªü m·ªôt form ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi tr·ª±c ti·∫øp.')
        .addChannelOption(option =>
            option.setName('k√™nh')
                .setDescription('K√™nh ƒë·ªÉ g·ª≠i ph·∫£n h·ªìi. B·ªè tr·ªëng s·∫Ω g·ª≠i ƒë·∫øn k√™nh m·∫∑c ƒë·ªãnh.')
                .addChannelTypes(ChannelType.GuildText)
                .setRequired(false)
        ),
    new SlashCommandBuilder()
        .setName('avatar')
        .setDescription('Xem ·∫£nh ƒë·∫°i di·ªán c·ªßa m·ªôt ng∆∞·ªùi d√πng.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Ng∆∞·ªùi b·∫°n mu·ªën xem avatar').setRequired(false)),
    new SlashCommandBuilder()
        .setName('poll')
        .setDescription('T·∫°o m·ªôt cu·ªôc b√¨nh ch·ªçn nhanh.')
        .addStringOption(option => option.setName('c√¢u_h·ªèi').setDescription('N·ªôi dung c√¢u h·ªèi b√¨nh ch·ªçn.').setRequired(true))
        .addStringOption(option => option.setName('l·ª±a_ch·ªçn').setDescription('C√°c l·ª±a ch·ªçn, c√°ch nhau b·ªüi d·∫•u ph·∫©y (,). T·ªëi ƒëa 10.').setRequired(true)),
    new SlashCommandBuilder()
        .setName('announce')
        .setDescription('G·ª≠i m·ªôt th√¥ng b√°o d∆∞·ªõi d·∫°ng embed t·ªõi m·ªôt k√™nh.')
        .addChannelOption(option => option.setName('k√™nh').setDescription('K√™nh ƒë·ªÉ g·ª≠i th√¥ng b√°o.').setRequired(true).addChannelTypes(ChannelType.GuildText))
        .addStringOption(option => option.setName('n·ªôi_dung').setDescription('N·ªôi dung th√¥ng b√°o. D√πng \\n ƒë·ªÉ xu·ªëng d√≤ng.').setRequired(true))
        .addStringOption(option => option.setName('ti√™u_ƒë·ªÅ').setDescription('Ti√™u ƒë·ªÅ c·ªßa th√¥ng b√°o.'))
        .addStringOption(option => option.setName('m√†u').setDescription('M√£ m√†u Hex cho embed (vd: #3498db).'))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('clear')
        .setDescription('X√≥a m·ªôt s·ªë l∆∞·ª£ng tin nh·∫Øn trong k√™nh hi·ªán t·∫°i.')
        .addIntegerOption(option => option.setName('s·ªë_l∆∞·ª£ng').setDescription('S·ªë tin nh·∫Øn c·∫ßn x√≥a (t·ª´ 1 ƒë·∫øn 100).').setRequired(true).setMinValue(1).setMaxValue(100))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages),
    new SlashCommandBuilder()
        .setName('kick')
        .setDescription('Kick m·ªôt th√†nh vi√™n kh·ªèi server.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn kick').setRequired(true))
        .addStringOption(option => option.setName('reason').setDescription('L√Ω do kick'))
        .setDefaultMemberPermissions(PermissionFlagsBits.KickMembers)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('ban')
        .setDescription('Ban m·ªôt th√†nh vi√™n kh·ªèi server.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn ban').setRequired(true))
        .addStringOption(option => option.setName('reason').setDescription('L√Ω do ban'))
        .setDefaultMemberPermissions(PermissionFlagsBits.BanMembers)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('unban')
        .setDescription('G·ª° ban cho m·ªôt th√†nh vi√™n b·∫±ng ID.')
        .addStringOption(option => option.setName('userid').setDescription('ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn g·ª° ban').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.BanMembers)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('timeout')
        .setDescription('Timeout m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn timeout').setRequired(true))
        .addStringOption(option => option.setName('time').setDescription('Th·ªùi gian mute (vd: 10m, 1h, 2d)').setRequired(true))
        .addStringOption(option => option.setName('reason').setDescription('L√Ω do mute'))
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('untimeout')
        .setDescription('G·ª° timeout cho m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn g·ª° timeout').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('rename')
        .setDescription('ƒê·ªïi nickname cho m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn ƒë·ªïi t√™n').setRequired(true))
        .addStringOption(option => option.setName('nickname').setDescription('Nickname m·ªõi').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageNicknames)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('move')
        .setDescription('Di chuy·ªÉn m·ªôt th√†nh vi√™n sang k√™nh tho·∫°i kh√°c.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn di chuy·ªÉn').setRequired(true))
        .addChannelOption(option => option.setName('channel').setDescription('K√™nh tho·∫°i mu·ªën chuy·ªÉn ƒë·∫øn').addChannelTypes(ChannelType.GuildVoice).setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.MoveMembers)
        .setDMPermission(false),
    new SlashCommandBuilder()
        .setName('roletemp')
        .setDescription('G√°n m·ªôt vai tr√≤ t·∫°m th·ªùi cho th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n b·∫°n mu·ªën g√°n vai tr√≤.').setRequired(true))
        .addRoleOption(option => option.setName('vai_tr√≤').setDescription('Vai tr√≤ b·∫°n mu·ªën g√°n.').setRequired(true))
        .addStringOption(option => option.setName('th·ªùi_h·∫°n').setDescription('Th·ªùi h·∫°n (v√≠ d·ª•: 10m, 1h, 7d).').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),
    new SlashCommandBuilder()
        .setName('unroletemp')
        .setDescription('G·ª° m·ªôt vai tr√≤ t·∫°m th·ªùi kh·ªèi th√†nh vi√™n ngay l·∫≠p t·ª©c.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n b·∫°n mu·ªën g·ª° vai tr√≤.').setRequired(true))
        .addRoleOption(option => option.setName('vai_tr√≤').setDescription('Vai tr√≤ b·∫°n mu·ªën g·ª°.').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),
    new SlashCommandBuilder()
        .setName('ticketsetup')
        .setDescription('C√†i ƒë·∫∑t b·∫£ng ƒëi·ªÅu khi·ªÉn ticket c√≥ t√πy ch·ªânh.')
        .addStringOption(option => option.setName('tieu_de').setDescription('Ti√™u ƒë·ªÅ ch√≠nh c·ªßa b·∫£ng ƒëi·ªÅu khi·ªÉn.').setRequired(true))
        .addStringOption(option => option.setName('mo_ta').setDescription('N·ªôi dung m√¥ t·∫£ chi ti·∫øt. D√πng \\n ƒë·ªÉ xu·ªëng d√≤ng.').setRequired(true))
        .addStringOption(option => option.setName('content').setDescription('N·ªôi dung tin nh·∫Øn ri√™ng b√™n tr√™n embed (ƒë·ªÉ ping role, th√™m emoji...).'))
        .addStringOption(option => option.setName('hinh_anh').setDescription('URL h√¨nh ·∫£nh (·∫£nh b√¨a) c·ªßa b·∫£ng ƒëi·ªÅu khi·ªÉn.'))
        .addStringOption(option => option.setName('anh_banner').setDescription('URL c·ªßa h√¨nh ·∫£nh l·ªõn hi·ªÉn th·ªã ph√≠a tr√™n embed.'))
        .addStringOption(option => option.setName('mau_sac').setDescription('M√£ m√†u Hex cho ƒë∆∞·ªùng vi·ªÅn (v√≠ d·ª•: #FF5733).'))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('formsetup')
        .setDescription('C√†i ƒë·∫∑t b·∫£ng ƒëi·ªÅu khi·ªÉn ƒë·ªÉ m·ªü form feedback.')
        .addStringOption(option => option.setName('tieu_de').setDescription('Ti√™u ƒë·ªÅ ch√≠nh c·ªßa b·∫£ng ƒëi·ªÅu khi·ªÉn.').setRequired(true))
        .addStringOption(option => option.setName('mo_ta').setDescription('N·ªôi dung m√¥ t·∫£ chi ti·∫øt. D√πng \\n ƒë·ªÉ xu·ªëng d√≤ng.').setRequired(true))
        .addStringOption(option => option.setName('content').setDescription('N·ªôi dung tin nh·∫Øn ri√™ng b√™n tr√™n embed (ƒë·ªÉ ping role, th√™m emoji...).'))
        .addChannelOption(option => option.setName('kenh_nhan_form').setDescription('K√™nh s·∫Ω nh·∫≠n k·∫øt qu·∫£ form. M·∫∑c ƒë·ªãnh l√† k√™nh feedback chung.'))
        .addStringOption(option => option.setName('hinh_anh').setDescription('URL h√¨nh ·∫£nh (·∫£nh b√¨a) c·ªßa b·∫£ng ƒëi·ªÅu khi·ªÉn.'))
        .addStringOption(option => option.setName('mau_sac').setDescription('M√£ m√†u Hex cho ƒë∆∞·ªùng vi·ªÅn (v√≠ d·ª•: #FF5733).'))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('warn')
        .setDescription('G·ª≠i c·∫£nh c√°o ƒë·∫øn m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn c·∫£nh c√°o').setRequired(true))
        .addStringOption(option => option.setName('l√Ω_do').setDescription('L√Ω do c·∫£nh c√°o').setRequired(true))
        .addStringOption(option => option.setName('n∆°i_g·ª≠i')
            .setDescription('Ch·ªçn n∆°i g·ª≠i c·∫£nh c√°o.')
            .setRequired(true)
            .addChoices(
                { name: 'G·ª≠i trong Server (C√¥ng khai)', value: 'server' },
                { name: 'G·ª≠i qua Tin nh·∫Øn ri√™ng (DM)', value: 'dm' }
            )
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers),
    new SlashCommandBuilder()
        .setName('resettickets')
        .setDescription('Reset s·ªë ƒë·∫øm c·ªßa ticket v·ªÅ l·∫°i 1.')
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('warnings')
        .setDescription('Ki·ªÉm tra s·ªë l·∫ßn c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn ki·ªÉm tra.').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers),
    new SlashCommandBuilder()
        .setName('resetwarnings')
        .setDescription('X√≥a to√†n b·ªô c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('ng∆∞·ªùi').setDescription('Th√†nh vi√™n c·∫ßn x√≥a c·∫£nh c√°o.').setRequired(true))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('level')
        .setDescription('Xem th√¥ng tin level c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c.')
        .addUserOption(option => option.setName('user').setDescription('Ng∆∞·ªùi b·∫°n mu·ªën xem level.')),
    new SlashCommandBuilder()
        .setName('daily')
        .setDescription('Nh·∫≠n ph·∫ßn th∆∞·ªüng XP h√†ng ng√†y.'),
    new SlashCommandBuilder()
        .setName('leaderboard')
        .setDescription('Xem b·∫£ng x·∫øp h·∫°ng level c·ªßa server.'),
    new SlashCommandBuilder()
        .setName('add-xp')
        .setDescription('[Admin] C·ªông XP cho m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('user').setDescription('Th√†nh vi√™n c·∫ßn c·ªông XP.').setRequired(true))
        .addIntegerOption(option => option.setName('amount').setDescription('S·ªë XP c·∫ßn c·ªông.').setRequired(true).setMinValue(1))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('remove-xp')
        .setDescription('[Admin] Tr·ª´ XP c·ªßa m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('user').setDescription('Th√†nh vi√™n c·∫ßn tr·ª´ XP.').setRequired(true))
        .addIntegerOption(option => option.setName('amount').setDescription('S·ªë XP c·∫ßn tr·ª´.').setRequired(true).setMinValue(1))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('set-level')
        .setDescription('[Admin] Thi·∫øt l·∫≠p level ch√≠nh x√°c cho m·ªôt th√†nh vi√™n.')
        .addUserOption(option => option.setName('user').setDescription('Th√†nh vi√™n c·∫ßn set level.').setRequired(true))
        .addIntegerOption(option => option.setName('level').setDescription('Level mu·ªën thi·∫øt l·∫≠p.').setRequired(true).setMinValue(0))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    new SlashCommandBuilder()
        .setName('giveaway')
        .setDescription('Qu·∫£n l√Ω h·ªá th·ªëng giveaway.')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild)
        .setDMPermission(false)
        .addSubcommand(subcommand =>
            subcommand
                .setName('start')
                .setDescription('B·∫Øt ƒë·∫ßu m·ªôt giveaway m·ªõi.')
                .addStringOption(option => option.setName('duration').setDescription('Th·ªùi gian giveaway (vd: 1d, 12h, 30m)').setRequired(true))
                .addIntegerOption(option => option.setName('winners').setDescription('S·ªë l∆∞·ª£ng ng∆∞·ªùi th·∫Øng.').setRequired(true).setMinValue(1))
                .addStringOption(option => option.setName('prize').setDescription('Gi·∫£i th∆∞·ªüng l√† g√¨?').setRequired(true))
                .addChannelOption(option => option.setName('channel').setDescription('K√™nh ƒë·ªÉ t·ªï ch·ª©c giveaway (m·∫∑c ƒë·ªãnh l√† k√™nh hi·ªán t·∫°i).').addChannelTypes(ChannelType.GuildText).setRequired(false))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('reroll')
                .setDescription('Ch·ªçn l·∫°i m·ªôt ng∆∞·ªùi th·∫Øng kh√°c cho giveaway ƒë√£ k·∫øt th√∫c.')
                .addStringOption(option => option.setName('message_id').setDescription('ID tin nh·∫Øn c·ªßa giveaway ƒë√£ k·∫øt th√∫c.').setRequired(true))
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('end')
                .setDescription('K·∫øt th√∫c m·ªôt giveaway ngay l·∫≠p t·ª©c.')
                .addStringOption(option => option.setName('message_id').setDescription('ID tin nh·∫Øn c·ªßa giveaway ƒëang ch·∫°y.').setRequired(true))
        ),

    // --- C√ÅC L·ªÜNH M·ªöI CHO T√çNH NƒÇNG NGHE NH·∫†C ---
    new SlashCommandBuilder()
        .setName('play')
        .setDescription('Ph√°t m·ªôt b√†i h√°t t·ª´ YouTube.')
        .addStringOption(option => 
            option.setName('b√†i_h√°t')
                .setDescription('T√™n b√†i h√°t ho·∫∑c link YouTube.')
                .setRequired(true)),

    new SlashCommandBuilder()
        .setName('skip')
        .setDescription('B·ªè qua b√†i h√°t hi·ªán t·∫°i.'),

    new SlashCommandBuilder()
        .setName('stop')
        .setDescription('D·ª´ng ph√°t nh·∫°c v√† x√≥a h√†ng ƒë·ª£i.'),

    new SlashCommandBuilder()
        .setName('queue')
        .setDescription('Hi·ªÉn th·ªã h√†ng ƒë·ª£i b√†i h√°t.'),

    new SlashCommandBuilder()
        .setName('pause')
        .setDescription('T·∫°m d·ª´ng b√†i h√°t hi·ªán t·∫°i.'),

    new SlashCommandBuilder()
        .setName('resume')
        .setDescription('Ti·∫øp t·ª•c ph√°t b√†i h√°t ƒë√£ t·∫°m d·ª´ng.'),

    new SlashCommandBuilder()
        .setName('nowplaying')
        .setDescription('Hi·ªÉn th·ªã th√¥ng tin b√†i h√°t ƒëang ph√°t.'),

    new SlashCommandBuilder()
        .setName('loop')
        .setDescription('L·∫∑p l·∫°i b√†i h√°t ho·∫∑c h√†ng ƒë·ª£i.')
        .addStringOption(option =>
            option.setName('ch·∫ø_ƒë·ªô')
                .setDescription('Ch·ªçn ch·∫ø ƒë·ªô l·∫∑p.')
                .setRequired(true)
                .addChoices(
                    { name: 'T·∫Øt', value: 'off' },
                    { name: 'B√†i h√°t', value: 'song' },
                    { name: 'H√†ng ƒë·ª£i', value: 'queue' }
                )),

].map(command => command.toJSON());

const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);

(async () => {
    try {
        console.log('ƒêang ƒëƒÉng k√Ω c√°c l·ªánh slash...');
        await rest.put(
            Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
            { body: commands }
        );
        console.log('ƒê√£ ƒëƒÉng k√Ω th√†nh c√¥ng c√°c l·ªánh slash.');
    } catch (error) {
        console.error('L·ªói khi ƒëƒÉng k√Ω l·ªánh:', error);
    }
})();

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildVoiceStates, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMessageReactions] });

// ================================================================= //
// --- C√ÅC H√ÄM X·ª¨ L√ù T√çNH NƒÇNG NGHE NH·∫†C ---
// ================================================================= //

async function playSong(guild, song) {
    const serverQueue = queue.get(guild.id);

    if (!song) {
        // N·∫øu kh√¥ng c√≤n b√†i h√°t n√†o, r·ªùi k√™nh tho·∫°i sau 1 ph√∫t v√† x√≥a h√†ng ƒë·ª£i
        serverQueue.textChannel.send('üé∂ H√†ng ƒë·ª£i ƒë√£ h·∫øt, t√¥i s·∫Ω r·ªùi k√™nh tho·∫°i sau 1 ph√∫t n·ªØa.');
        setTimeout(() => {
            const currentQueue = queue.get(guild.id);
            // Ki·ªÉm tra l·∫°i xem c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c th√™m v√†o trong l√∫c ch·ªù kh√¥ng
            if (currentQueue && currentQueue.songs.length === 0) {
                if(currentQueue.connection) currentQueue.connection.destroy();
                queue.delete(guild.id);
            }
        }, 60000); // 1 ph√∫t
        return;
    }

    // --- B·∫ÆT ƒê·∫¶U KH·ªêI TRY...CATCH ---
    try {
        // T·∫°o lu·ªìng √¢m thanh t·ª´ youtube
        const stream = await play.stream(song.url);
        const resource = createAudioResource(stream.stream, { inputType: stream.type });
        
        // Ph√°t nh·∫°c
        serverQueue.player.play(resource);
        serverQueue.playing = true;

        // G·ª≠i th√¥ng b√°o ƒëang ph√°t nh·∫°c
        const nowPlayingEmbed = new EmbedBuilder()
            .setColor('Green')
            .setTitle('üéµ ƒêang ph√°t')
            .setDescription(`**[${song.title}](${song.url})**`)
            .setThumbnail(song.thumbnail)
            .addFields(
                { name: 'Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
                { name: 'Y√™u c·∫ßu b·ªüi', value: song.requestedBy.toString(), inline: true }
            )
            .setTimestamp();
            
        await serverQueue.textChannel.send({ embeds: [nowPlayingEmbed] });

    } catch (error) {
        // --- X·ª¨ L√ù KHI C√ì L·ªñI ---
        console.error(`L·ªói khi ph√°t b√†i h√°t "${song.title}":`, error);
        await serverQueue.textChannel.send(`‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi c·ªë g·∫Øng ph√°t b√†i: **${song.title}**. ƒêang t·ª± ƒë·ªông chuy·ªÉn sang b√†i ti·∫øp theo.`);
        
        // B·ªè qua b√†i h√°t b·ªã l·ªói v√† ph√°t b√†i ti·∫øp theo
        serverQueue.songs.shift();
        playSong(guild, serverQueue.songs[0]);
    }
}


// --- C√ÅC H√ÄM X·ª¨ L√ù GIVEAWAY ---
async function endGiveaway(messageId) {
    const giveaway = db.prepare('SELECT * FROM giveaways WHERE messageId = ? AND ended = 0').get(messageId);
    if (!giveaway) return;

    db.prepare('UPDATE giveaways SET ended = 1 WHERE messageId = ?').run(messageId);
    
    const channel = await client.channels.cache.get(giveaway.channelId);
    if (!channel) return;

    try {
        const message = await channel.messages.fetch(messageId);
        const reaction = message.reactions.cache.get('üéâ');
        const users = await reaction.users.fetch();
        const participants = users.filter(user => !user.bot).map(user => user.id);

        if (participants.length === 0) {
            const endedEmbed = EmbedBuilder.from(message.embeds[0])
                .setColor('Red')
                .setDescription(`Kh√¥ng c√≥ ai tham gia, kh√¥ng th·ªÉ ch·ªçn ng∆∞·ªùi th·∫Øng!`);
            await message.edit({ embeds: [endedEmbed], components: [] });
            return channel.send(`Giveaway cho **${giveaway.prize}** ƒë√£ k·∫øt th√∫c m√† kh√¥ng c√≥ ng∆∞·ªùi tham gia.`);
        }

        const winners = [];
        for (let i = 0; i < giveaway.winnerCount; i++) {
            if (participants.length === 0) break;
            const winnerIndex = Math.floor(Math.random() * participants.length);
            winners.push(participants.splice(winnerIndex, 1)[0]);
        }

        const winnerTags = winners.map(id => `<@${id}>`).join(', ');

        const endedEmbed = EmbedBuilder.from(message.embeds[0])
            .setColor('Gold')
            .setDescription(`**Giveaway ƒë√£ k·∫øt th√∫c!**\nNg∆∞·ªùi th·∫Øng: ${winnerTags}`);
        await message.edit({ embeds: [endedEmbed], components: [] });

        await channel.send(`üéâ Ch√∫c m·ª´ng ${winnerTags}! B·∫°n ƒë√£ th·∫Øng **${giveaway.prize}**! üéâ`);

    } catch (error) {
        console.error(`L·ªói khi k·∫øt th√∫c giveaway (ID: ${messageId}):`, error);
        channel.send(`ƒê√£ c√≥ l·ªói khi c·ªë g·∫Øng k·∫øt th√∫c giveaway cho **${giveaway.prize}**. Vui l√≤ng ki·ªÉm tra l·∫°i tin nh·∫Øn g·ªëc.`);
    }
}

async function scheduleGiveawaysOnStartup() {
    const activeGiveaways = db.prepare('SELECT * FROM giveaways WHERE ended = 0').all();
    console.log(`üîé T√¨m th·∫•y ${activeGiveaways.length} giveaway ƒëang ho·∫°t ƒë·ªông...`);

    for (const giveaway of activeGiveaways) {
        const remainingTime = giveaway.endsAt - Date.now();

        if (remainingTime <= 0) {
            console.log(`Giveaway (ID: ${giveaway.messageId}) ƒë√£ h·∫øt h·∫°n, ƒëang k·∫øt th√∫c...`);
            await endGiveaway(giveaway.messageId);
        } else {
            console.log(`Kh√¥i ph·ª•c l·ªãch h·∫πn k·∫øt th√∫c giveaway (ID: ${giveaway.messageId}) sau ${ms(remainingTime)}.`);
            setTimeout(() => endGiveaway(giveaway.messageId), remainingTime);
        }
    }
}

async function removeTempRole(userId, guildId, roleId) {
    const guild = await client.guilds.fetch(guildId).catch(() => null);
    if (!guild) return;

    try {
        const member = await guild.members.fetch(userId).catch(() => null);
        if (member && member.roles.cache.has(roleId)) {
            await member.roles.remove(roleId);
            console.log(`ƒê√£ g·ª° vai tr√≤ ${roleId} kh·ªèi ${userId} trong server ${guild.name}`);
        }
    } catch (error) {
        console.error(`L·ªói khi g·ª° vai tr√≤ ${roleId} kh·ªèi ${userId}:`, error);
    } finally {
        db.prepare(`DELETE FROM temp_roles WHERE userId = ? AND roleId = ? AND guildId = ?`).run(userId, roleId, guildId);
    }
}

function restoreTempRoles() {
    const rolesToRestore = db.prepare(`SELECT * FROM temp_roles`).all();
    console.log(`üîé T√¨m th·∫•y ${rolesToRestore.length} vai tr√≤ t·∫°m th·ªùi c·∫ßn kh√¥i ph·ª•c...`);

    rolesToRestore.forEach(async (entry) => {
        const remainingTime = entry.expiresAt - Date.now();

        if (remainingTime <= 0) {
            console.log(`Vai tr√≤ ${entry.roleId} c·ªßa ${entry.userId} ƒë√£ h·∫øt h·∫°n, ƒëang g·ª°...`);
            await removeTempRole(entry.userId, entry.guildId, entry.roleId);
        } else {
            console.log(`Kh√¥i ph·ª•c l·ªãch h·∫πn g·ª° vai tr√≤ ${entry.roleId} cho ${entry.userId} sau ${ms(remainingTime)}.`);
            setTimeout(() => removeTempRole(entry.userId, entry.guildId, entry.roleId), remainingTime);
        }
    });
}

client.once('ready', () => {
    console.log(`‚úÖ Bot ƒë√£ online! T√™n bot: ${client.user.tag}`);

    client.user.setPresence({
        activities: [{
            name: 'üé∂ Nh·∫°c cho b·∫°n', 
            type: ActivityType.Playing
        }],
        status: 'online', 
    });

    restoreTempRoles();
    scheduleGiveawaysOnStartup();
});

client.on('interactionCreate', async interaction => {
    if (interaction.isModalSubmit()) {
        if (interaction.customId.startsWith('feedbackModal_')) {
            const channelId = interaction.customId.split('_')[1];
            const tieuDe = interaction.fields.getTextInputValue('tieuDeInput');
            const noiDung = interaction.fields.getTextInputValue('noiDungInput');
            const danhGia = interaction.fields.getTextInputValue('danhGiaInput') || 'Ch∆∞a ƒë√°nh gi√°';
            const feedbackEmbed = new EmbedBuilder().setColor('Green').setTitle(`üìù Ph·∫£n h·ªìi m·ªõi: ${tieuDe}`).setDescription(noiDung).addFields({ name: 'ƒê√°nh gi√°', value: `**${danhGia}**` }).setAuthor({ name: interaction.user.tag, iconURL: interaction.user.displayAvatarURL() }).setTimestamp();
            try {
                const channel = await client.channels.fetch(channelId);
                if (channel) {
                    await channel.send({ embeds: [feedbackEmbed] });
                    await interaction.reply({ content: `C·∫£m ∆°n b·∫°n! Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi k√™nh ${channel}.`, ephemeral: true });
                } else {
                    await interaction.reply({ content: 'L·ªói: Kh√¥ng t√¨m th·∫•y k√™nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.', ephemeral: true });
                }
            } catch (error) {
                console.error("L·ªói khi g·ª≠i feedback:", error);
                await interaction.reply({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra. C√≥ th·ªÉ t√¥i kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn v√†o k√™nh ƒë√≥.', ephemeral: true });
            }
        }
        return;
    }

    if (interaction.isButton()) {
        const customId = interaction.customId;

        if (customId === 'show_ticket_options') {
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('select_ticket_category')
                .setPlaceholder('Vui l√≤ng ch·ªçn m·ªôt lo·∫°i h·ªó tr·ª£ !')
                .addOptions([
                    {
                        label: 'H·ªó tr·ª£ Chung',
                        description: 'C√°c v·∫•n ƒë·ªÅ v·ªÅ l·ªói, k·ªπ thu·∫≠t ho·∫∑c c·∫ßn h∆∞·ªõng d·∫´n.',
                        value: 'technical_support',
                        emoji: '<a:chat:1413005097633583214>'
                    },
                    {
                        label: 'Li√™n h·ªá Admin',
                        description: 'Li√™n h·ªá v·ªõi em Ph√∫c.',
                        value: 'admin_contact',
                        emoji: '<a:Purp_Alert:1413004990037098547>'
                    }
                ]);

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await interaction.reply({
                content: '**B·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ g√¨? H√£y ch·ªçn ·ªü danh s√°ch d∆∞·ªõi nh√© ! <:PridecordWarning:1412665674026717207> **',
                components: [row],
                ephemeral: true 
            });
        }
        else if (customId === 'close_ticket') {
            if (!interaction.member.roles.cache.has(SUPPORT_ROLE_ID) && !interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return interaction.reply({ content: 'Ch·ªâ ƒë·ªôi ng≈© h·ªó tr·ª£ m·ªõi c√≥ th·ªÉ ƒë√≥ng ticket.', ephemeral: true });
            }
            await interaction.reply({ content: 'ƒêang x√≥a k√™nh...', ephemeral: true });
            interaction.channel.delete().catch(err => console.error("Kh√¥ng th·ªÉ x√≥a k√™nh ticket:", err));
        }
        else if (customId.startsWith('open_feedback_form_')) {
            const feedbackChannelId = customId.split('_')[3]; 
            const modal = new ModalBuilder()
                .setCustomId(`feedbackModal_${feedbackChannelId}`)
                .setTitle('G·ª≠i ph·∫£n h·ªìi cho Ph√∫c');

            const tieuDeInput = new TextInputBuilder().setCustomId('tieuDeInput').setLabel("T√™n c·ªßa b·∫°n ?").setStyle(TextInputStyle.Short).setPlaceholder('Ghi ·ªü ƒë√¢y !').setRequired(true);
            const noiDungInput = new TextInputBuilder().setCustomId('noiDungInput').setLabel("N·ªôi dung").setStyle(TextInputStyle.Paragraph).setPlaceholder('B·∫°n mu·ªën n√≥i ƒëi·ªÅu g√¨ ? H√£y ghi ·ªü ƒë√¢y !').setRequired(true).setMinLength(10);
            const danhGiaInput = new TextInputBuilder().setCustomId('danhGiaInput').setLabel("N·ªôi dung 2").setStyle(TextInputStyle.Paragraph).setPlaceholder('B·∫°n mu·ªën n√≥i ƒëi·ªÅu g√¨ ? H√£y ghi ·ªü ƒë√¢y ! Kh√¥ng c√≥ th√¨ b·ªè tr·ªëng.').setRequired(false);

            const firstActionRow = new ActionRowBuilder().addComponents(tieuDeInput);
            const secondActionRow = new ActionRowBuilder().addComponents(noiDungInput);
            const thirdActionRow = new ActionRowBuilder().addComponents(danhGiaInput);

            modal.addComponents(firstActionRow, secondActionRow, thirdActionRow);
            await interaction.showModal(modal);
        }
    }
    
    if (interaction.isChatInputCommand()) {
        const { commandName, user, guild } = interaction;
        
        // --- X·ª¨ L√ù C√ÅC L·ªÜNH NH·∫†C ---
        const musicCommands = ['play', 'skip', 'stop', 'queue', 'pause', 'resume', 'nowplaying', 'loop'];
        if (musicCommands.includes(commandName)) {
            const serverQueue = queue.get(interaction.guild.id);
            const voiceChannel = interaction.member.voice.channel;
            
            if (commandName === 'play') {
                if (!voiceChannel) return interaction.reply({ content: 'B·∫°n c·∫ßn ph·∫£i ·ªü trong m·ªôt k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c!', ephemeral: true });
                const permissions = voiceChannel.permissionsFor(interaction.client.user);
                if (!permissions.has(PermissionFlagsBits.Connect) || !permissions.has(PermissionFlagsBits.Speak)) {
                    return interaction.reply({ content: 'T√¥i kh√¥ng c√≥ quy·ªÅn tham gia v√† n√≥i trong k√™nh tho·∫°i c·ªßa b·∫°n!', ephemeral: true });
                }

                await interaction.deferReply();
                const query = interaction.options.getString('b√†i_h√°t');
                
                // T√¨m ki·∫øm video
                const searchResult = await play.search(query, { limit: 1 });
                if (searchResult.length === 0) {
                    return interaction.followUp({ content: `Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o v·ªõi t√™n "${query}"` });
                }
                const video = searchResult[0];

                const song = {
                    title: video.title,
                    url: video.url,
                    thumbnail: video.thumbnails[0]?.url,
                    duration: video.durationRaw,
                    requestedBy: interaction.user
                };

                if (!serverQueue) {
                    const queueConstruct = {
                        textChannel: interaction.channel,
                        voiceChannel: voiceChannel,
                        connection: null,
                        songs: [],
                        player: createAudioPlayer(),
                        playing: true,
                        loop: 'off' // off, song, queue
                    };
                    queue.set(interaction.guild.id, queueConstruct);
                    queueConstruct.songs.push(song);

                    try {
                        const connection = joinVoiceChannel({
                            channelId: voiceChannel.id,
                            guildId: interaction.guild.id,
                            adapterCreator: interaction.guild.voiceAdapterCreator,
                        });
                        queueConstruct.connection = connection;

                        // T·ª± ƒë·ªông chuy·ªÉn b√†i
                        queueConstruct.player.on(AudioPlayerStatus.Idle, () => {
                            const oldSong = queueConstruct.songs.shift();
                            if (queueConstruct.loop === 'song') {
                                queueConstruct.songs.unshift(oldSong); // Th√™m l·∫°i b√†i c≈© v√†o ƒë·∫ßu h√†ng ƒë·ª£i
                            } else if (queueConstruct.loop === 'queue') {
                                queueConstruct.songs.push(oldSong); // Th√™m b√†i c≈© v√†o cu·ªëi h√†ng ƒë·ª£i
                            }
                            playSong(interaction.guild, queueConstruct.songs[0]);
                        });

                        // X·ª≠ l√Ω l·ªói
                        queueConstruct.player.on('error', error => {
                            console.error(`L·ªói player: ${error.message}`);
                            queueConstruct.songs.shift();
                            playSong(interaction.guild, queueConstruct.songs[0]);
                        });
                        
                        connection.subscribe(queueConstruct.player);
                        playSong(interaction.guild, queueConstruct.songs[0]);
                        await interaction.followUp({ content: `ƒê√£ b·∫Øt ƒë·∫ßu ph√°t: **${song.title}**` });


                    } catch (err) {
                        console.error(err);
                        queue.delete(interaction.guild.id);
                        return interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v√†o k√™nh tho·∫°i.' });
                    }
                } else {
                    serverQueue.songs.push(song);
                    return interaction.followUp({ content: `ƒê√£ th√™m **${song.title}** v√†o h√†ng ƒë·ª£i!` });
                }
            }
            else if (commandName === 'skip') {
                if (!voiceChannel) return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ d√πng l·ªánh n√†y!', ephemeral: true });
                if (!serverQueue) return interaction.reply({ content: 'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!', ephemeral: true });
                if (serverQueue.songs.length <= 1 && serverQueue.loop !== 'queue') {
                    serverQueue.player.stop();
                    serverQueue.connection.destroy();
                    queue.delete(interaction.guild.id);
                    return interaction.reply('ƒê√£ b·ªè qua. H√†ng ƒë·ª£i tr·ªëng, t√¥i ƒë√£ r·ªùi k√™nh tho·∫°i.');
                }
                serverQueue.player.stop(); // S·ª± ki·ªán 'idle' s·∫Ω t·ª± ƒë·ªông ph√°t b√†i ti·∫øp theo
                return interaction.reply('ƒê√£ b·ªè qua b√†i h√°t!');
            }
            else if (commandName === 'stop') {
                if (!voiceChannel) return interaction.reply({ content: 'B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i ƒë·ªÉ d√πng l·ªánh n√†y!', ephemeral: true });
                if (!serverQueue) return interaction.reply({ content: 'Kh√¥ng c√≥ g√¨ ƒë·ªÉ d·ª´ng c·∫£!', ephemeral: true });
                serverQueue.songs = [];
                serverQueue.player.stop();
                serverQueue.connection.destroy();
                queue.delete(interaction.guild.id);
                return interaction.reply('ƒê√£ d·ª´ng ph√°t nh·∫°c v√† x√≥a h√†ng ƒë·ª£i.');
            }
             else if (commandName === 'queue') {
                if (!serverQueue) return interaction.reply({ content: 'H√†ng ƒë·ª£i ƒëang tr·ªëng!', ephemeral: true });
                
                const queueEmbed = new EmbedBuilder()
                    .setColor('Blue')
                    .setTitle('üé∂ H√†ng ƒë·ª£i b√†i h√°t')
                    .setDescription(
                        `**ƒêang ph√°t:** [${serverQueue.songs[0].title}](${serverQueue.songs[0].url})\n\n` +
                        (serverQueue.songs.slice(1).map((song, index) => `**${index + 1}.** [${song.title}](${song.url})`).join('\n') || 'Kh√¥ng c√≥ b√†i h√°t n√†o ti·∫øp theo.')
                    )
                    .setFooter({ text: `T·ªïng c·ªông ${serverQueue.songs.length} b√†i h√°t.` });
                
                return interaction.reply({ embeds: [queueEmbed] });
            }
             else if (commandName === 'pause') {
                if (!serverQueue || !serverQueue.playing) return interaction.reply({ content: 'Kh√¥ng c√≥ nh·∫°c ƒëang ph√°t ho·∫∑c ƒë√£ t·∫°m d·ª´ng r·ªìi!', ephemeral: true });
                serverQueue.player.pause();
                serverQueue.playing = false;
                return interaction.reply('‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng nh·∫°c.');
            }
            else if (commandName === 'resume') {
                if (!serverQueue || serverQueue.playing) return interaction.reply({ content: 'Kh√¥ng c√≥ g√¨ ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c nh·∫°c v·∫´n ƒëang ph√°t!', ephemeral: true });
                serverQueue.player.unpause();
                serverQueue.playing = true;
                return interaction.reply('‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c.');
            }
             else if (commandName === 'nowplaying') {
                if (!serverQueue) return interaction.reply({ content: 'Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!', ephemeral: true });
                const song = serverQueue.songs[0];
                 const nowPlayingEmbed = new EmbedBuilder()
                    .setColor('Green')
                    .setTitle('üéµ ƒêang ph√°t')
                    .setDescription(`**[${song.title}](${song.url})**`)
                    .setThumbnail(song.thumbnail)
                    .addFields(
                        { name: 'Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
                        { name: 'Y√™u c·∫ßu b·ªüi', value: song.requestedBy.toString(), inline: true }
                    )
                    .setTimestamp();
                return interaction.reply({ embeds: [nowPlayingEmbed] });
            }
             else if (commandName === 'loop') {
                if (!serverQueue) return interaction.reply({ content: 'Kh√¥ng c√≥ g√¨ ƒë·ªÉ l·∫∑p l·∫°i!', ephemeral: true });
                const mode = interaction.options.getString('ch·∫ø_ƒë·ªô');
                serverQueue.loop = mode;
                let modeText;
                if (mode === 'off') modeText = 'T·∫Øt l·∫∑p l·∫°i';
                else if (mode === 'song') modeText = 'L·∫∑p l·∫°i b√†i h√°t hi·ªán t·∫°i';
                else if (mode === 'queue') modeText = 'L·∫∑p l·∫°i to√†n b·ªô h√†ng ƒë·ª£i';
                return interaction.reply(`üîÅ ƒê√£ ƒë·∫∑t ch·∫ø ƒë·ªô l·∫∑p th√†nh: **${modeText}**.`);
            }

            return; // D·ª´ng t·∫°i ƒë√¢y ƒë·ªÉ kh√¥ng ch·∫°y c√°c l·ªánh kh√°c
        }

        // --- C√ÅC L·ªÜNH C≈® ---
        if (commandName === 'info') {
             await interaction.deferReply();
             const subcommand = interaction.options.getSubcommand();
 
             if (subcommand === 'user') {
                 const user = interaction.options.getUser('user');
                 const member = interaction.guild.members.cache.get(user.id);
                 const userEmbed = new EmbedBuilder()
                     .setColor('#0099ff')
                     .setTitle(`Th√¥ng tin v·ªÅ ${user.username}`)
                     .setThumbnail(user.displayAvatarURL({ dynamic: true }))
                     .addFields(
                         { name: 'üë§ T√™n ng∆∞·ªùi d√πng', value: user.tag, inline: true },
                         { name: 'üÜî ID', value: user.id, inline: true },
                         { name: 'ü§ñ C√≥ ph·∫£i l√† bot?', value: user.bot ? 'ƒê√∫ng' : 'Kh√¥ng', inline: true },
                         { name: 'üìÖ Ng√†y t·∫°o t√†i kho·∫£n', value: `<t:${parseInt(user.createdAt / 1000)}:F>`, inline: false },
                     )
                     .setTimestamp();
 
                 if (member) {
                      userEmbed.addFields(
                         { name: 'Nicknames', value: member.nickname || 'Kh√¥ng c√≥', inline: true },
                         { name: 'ü´Ç Ng√†y tham gia server', value: `<t:${parseInt(member.joinedAt / 1000)}:F>`, inline: false },
                         { name: 'üé® Vai tr√≤ cao nh·∫•t', value: member.roles.highest.toString(), inline: true },
                      );
                 }
                 await interaction.followUp({ embeds: [userEmbed] });
 
             } else if (subcommand === 'server') {
                 const { guild } = interaction;
                 await guild.members.fetch();
                 const owner = await guild.fetchOwner();
 
                 const serverEmbed = new EmbedBuilder()
                     .setColor('#0099ff')
                     .setAuthor({ name: guild.name, iconURL: guild.iconURL({ dynamic: true }) })
                     .setThumbnail(guild.iconURL({ dynamic: true }))
                     .addFields(
                         { name: 'üëë Ch·ªß Server', value: owner.user.tag, inline: true },
                         { name: 'üìÖ Ng√†y th√†nh l·∫≠p', value: `<t:${parseInt(guild.createdAt / 1000)}:F>`, inline: true },
                         { name: 'üÜî Server ID', value: guild.id, inline: true },
                         { name: 'üë• Th√†nh vi√™n', value: `T·ªïng: **${guild.memberCount}**\nüë§ Con ng∆∞·ªùi: **${guild.members.cache.filter(member => !member.user.bot).size}**\nü§ñ Bot: **${guild.members.cache.filter(member => member.user.bot).size}**`, inline: true },
                         { name: 'üé® Roles', value: `**${guild.roles.cache.size}** roles`, inline: true },
                         { name: 'üôÇ Emojis & üí• Stickers', value: `üôÇ **${guild.emojis.cache.size}** emojis\nüí• **${guild.stickers.cache.size}** stickers`, inline: true },
                     )
                     .setTimestamp()
                     .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL({ dynamic: true }) });
 
                 await interaction.followUp({ embeds: [serverEmbed] });
             }
        }
        else if (commandName === 'ping') {
            await interaction.deferReply();
            const botLatency = Date.now() - interaction.createdTimestamp;
            const apiLatency = client.ws.ping;
            const pingEmbed = new EmbedBuilder()
                .setColor('Green')
                .setTitle('üèì Pong!')
                .addFields(
                    { name: 'ü§ñ ƒê·ªô tr·ªÖ Bot', value: `**${botLatency}ms**`, inline: true },
                    { name: 'üåê ƒê·ªô tr·ªÖ API', value: `**${apiLatency}ms**`, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
            await interaction.followUp({ embeds: [pingEmbed] });
        }
        else if (commandName === 'hi1') {
            await interaction.deferReply();
            const targetUser = interaction.options.getUser('ng∆∞·ªùi');
            const greetings = [
                `Hellu ${targetUser}, ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! <:reaction_role_1876:1410282620738339040>`,
                `Helo ${targetUser}! Ch√∫c b·∫°n c√≥ nh√¨u ni·ªÅm zui`,
                `${targetUser}. Ch√∫c con v·ª£ c√≥ nhi·ªÅu ni·ªÅm zui <a:emoji_12022:1410282605042995230>`,
                `Hiluu ${targetUser}, ch√∫c b·∫°n m·ªôt ng√†y m·ªõi an l√†nh <:HeheCat:1412640800877187114>`,
                `Ch√†o ${targetUser}, ch√∫c c√°c b·∫°n m·ªôt ng√†y vui <:15597073609823thumbnail:1412641080616419418>`
            ];
            const randomMessage = greetings[Math.floor(Math.random() * greetings.length)];
            await interaction.followUp(randomMessage);
        }
        else if (commandName === 'hi2') {
            await interaction.deferReply(); 
            const targetUser = interaction.options.getUser('ng∆∞·ªùi');
            const chonBuoi = interaction.options.getString('chon_buoi');
            const loiChucTuyY = interaction.options.getString('loi_chuc');
            let loiChuc;
            if (loiChucTuyY) {
                loiChuc = `Hii ${targetUser}, ${loiChucTuyY}`;
            } else if (chonBuoi) {
                if (chonBuoi === 's√°ng') { loiChuc = `Ch√†o bu·ªïi s√°ng, ${targetUser}! Ch√∫c b·∫°n m·ªôt ng√†y m·ªõi tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng! ‚òÄÔ∏è`; }
                else if (chonBuoi === 'tr∆∞a') { loiChuc = `Bu·ªïi tr∆∞a vui v·∫ª nh√©, ${targetUser}! Nh·ªõ ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß nha. üïõ`; }
                else if (chonBuoi === 'chi·ªÅu') { loiChuc = `Ch√∫c ${targetUser} m·ªôt bu·ªïi chi·ªÅu l√†m vi·ªác hi·ªáu qu·∫£! üåá`; }
                else if (chonBuoi === 't·ªëi') { loiChuc = `Bu·ªïi t·ªëi t·ªët l√†nh v√† ng·ªß th·∫≠t ngon nh√©, ${targetUser}! üåô`; }
            } else {
                loiChuc = `Hii ${targetUser}, ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! üíï`;
            }
            await interaction.followUp(loiChuc); 
        }
        else if (commandName === 'time') { 
            await interaction.deferReply(); 
            const timeZone = interaction.options.getString('quoc_gia') || 'Asia/Ho_Chi_Minh'; 
            const choiceName = interaction.options.getString('quoc_gia') ? commands.find(c => c.name === 'time').options[0].choices.find(ch => ch.value === timeZone).name : 'üáªüá≥ Vi·ªát Nam'; 
            const now = new Date(); 
            const timeParts = new Intl.DateTimeFormat('en-GB', { timeZone: timeZone, hour: '2-digit', minute: '2-digit', hour12: false }).formatToParts(now); 
            const hour = timeParts.find(part => part.type === 'hour').value; 
            const minute = timeParts.find(part => part.type === 'minute').value; 
            const dateParts = new Intl.DateTimeFormat('vi-VN', { timeZone: timeZone, weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }).format(now); 
            const dateTimeString = `${hour}:${minute} ${dateParts}`; 
            await interaction.followUp(`T·∫°i ${choiceName}, b√¢y gi·ªù l√†: ${dateTimeString} üïí`); 
        }
        else if (commandName === 'feedback') { 
            const targetChannel = interaction.options.getChannel('k√™nh'); 
            const feedbackChannelId = targetChannel ? targetChannel.id : DEFAULT_FEEDBACK_CHANNEL_ID; 
            const modal = new ModalBuilder().setCustomId(`feedbackModal_${feedbackChannelId}`).setTitle('G·ª≠i ph·∫£n h·ªìi cho Ph√∫c'); 
            const tieuDeInput = new TextInputBuilder().setCustomId('tieuDeInput').setLabel("T√™n c·ªßa b·∫°n ?").setStyle(TextInputStyle.Short).setPlaceholder('Ghi ·ªü ƒë√¢y !').setRequired(true); 
            const noiDungInput = new TextInputBuilder().setCustomId('noiDungInput').setLabel("N·ªôi dung").setStyle(TextInputStyle.Paragraph).setPlaceholder('B·∫°n mu·ªën n√≥i ƒëi·ªÅu g√¨ ? H√£y ghi ·ªü ƒë√¢y !').setRequired(true); 
            const danhGiaInput = new TextInputBuilder().setCustomId('danhGiaInput').setLabel("ƒê√°nh gi√° c·ªßa b·∫°n (T·ªët, C·∫ßn c·∫£i thi·ªán..)").setStyle(TextInputStyle.Short).setPlaceholder('Ghi ·ªü ƒë√¢y !').setRequired(false); 
            const firstActionRow = new ActionRowBuilder().addComponents(tieuDeInput); 
            const secondActionRow = new ActionRowBuilder().addComponents(noiDungInput); 
            const thirdActionRow = new ActionRowBuilder().addComponents(danhGiaInput); 
            modal.addComponents(firstActionRow, secondActionRow, thirdActionRow); 
            await interaction.showModal(modal); 
        }
        else if (commandName === 'avatar') {
            await interaction.deferReply();
            const user = interaction.options.getUser('ng∆∞·ªùi') || interaction.user;
            const avatarEmbed = new EmbedBuilder()
                .setColor('#2b2d31')
                .setTitle(`Avatar c·ªßa ${user.username}`)
                .setImage(user.displayAvatarURL({ dynamic: true, size: 4096 }))
                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });
            await interaction.followUp({ embeds: [avatarEmbed] });
        }
        else if (commandName === 'poll') {
            await interaction.deferReply({ ephemeral: true });
            const question = interaction.options.getString('c√¢u_h·ªèi');
            const optionsStr = interaction.options.getString('l·ª±a_ch·ªçn');
            const options = optionsStr.split(',').map(opt => opt.trim());

            if (options.length < 2 || options.length > 10) {
                return interaction.followUp({ content: 'Vui l√≤ng cung c·∫•p t·ª´ 2 ƒë·∫øn 10 l·ª±a ch·ªçn, c√°ch nhau b·ªüi d·∫•u ph·∫©y.' });
            }
            
            const numberEmojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
            const description = options.map((opt, index) => `${numberEmojis[index]} ${opt}`).join('\n\n');

            const pollEmbed = new EmbedBuilder()
                .setColor('Aqua')
                .setAuthor({ name: `B√¨nh ch·ªçn ƒë∆∞·ª£c t·∫°o b·ªüi ${interaction.user.username}`, iconURL: interaction.user.displayAvatarURL() })
                .setTitle(`üìä ${question}`)
                .setDescription(description)
                .setTimestamp();
            
            try {
                const pollMessage = await interaction.channel.send({ embeds: [pollEmbed] });
                for (let i = 0; i < options.length; i++) {
                    await pollMessage.react(numberEmojis[i]);
                }
                await interaction.followUp({ content: 'ƒê√£ t·∫°o b√¨nh ch·ªçn th√†nh c√¥ng!' });
            } catch (error) {
                console.error("L·ªói khi t·∫°o poll:", error);
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o b√¨nh ch·ªçn.' });
            }
        }
        else if (commandName === 'announce') {
            await interaction.deferReply({ ephemeral: true });
            const channel = interaction.options.getChannel('k√™nh');
            const content = interaction.options.getString('n·ªôi_dung').replace(/\\n/g, '\n');
            const title = interaction.options.getString('ti√™u_ƒë·ªÅ');
            const color = interaction.options.getString('m√†u');

            const announceEmbed = new EmbedBuilder()
                .setDescription(content)
                .setTimestamp()
                .setAuthor({ name: `Th√¥ng b√°o t·ª´ ${interaction.user.username}`, iconURL: interaction.user.displayAvatarURL() });

            if (title) announceEmbed.setTitle(title);
            if (color) announceEmbed.setColor(color);

            try {
                await channel.send({ embeds: [announceEmbed] });
                await interaction.followUp({ content: `ƒê√£ g·ª≠i th√¥ng b√°o t·ªõi k√™nh ${channel} th√†nh c√¥ng.` });
            } catch (error) {
                console.error("L·ªói khi g·ª≠i th√¥ng b√°o:", error);
                await interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa bot trong k√™nh ƒë√≥.' });
            }
        }
        else if (commandName === 'clear') {
            await interaction.deferReply({ ephemeral: true });
            const amount = interaction.options.getInteger('s·ªë_l∆∞·ª£ng');

            try {
                const fetched = await interaction.channel.messages.fetch({ limit: amount });
                const deletedMessages = await interaction.channel.bulkDelete(fetched, true);
                await interaction.followUp({ content: `‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ${deletedMessages.size} tin nh·∫Øn.` });
            } catch (error) {
                console.error("L·ªói khi x√≥a tin nh·∫Øn:", error);
                await interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa bot.' });
            }
        }
        else if (commandName === 'kick' || commandName === 'ban') { 
            await interaction.deferReply(); 
            const target = interaction.options.getMember('ng∆∞·ªùi'); 
            const reason = interaction.options.getString('reason') ?? 'Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p.'; 
            if (!target) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y.', ephemeral: true }); 
            if (target.id === interaction.user.id) return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ t·ª± th·ª±c hi·ªán h√†nh ƒë·ªông n√†y l√™n ch√≠nh m√¨nh!', ephemeral: true }); 
            if (target.roles.highest.position >= interaction.member.roles.highest.position) return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông l√™n ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng b·∫°n.', ephemeral: true }); 
            const action = commandName === 'kick' ? 'kick' : 'ban'; 
            const actionVerb = commandName === 'kick' ? 'Kick' : 'Ban'; 
            const color = commandName === 'kick' ? 'Orange' : 'Red'; 
            if (!target[action + 'able']) return interaction.followUp({ content: `T√¥i kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ ${action} th√†nh vi√™n n√†y.`, ephemeral: true }); 
            try { 
                await target[action]({ reason }); 
                const embed = new EmbedBuilder().setColor(color).setTitle(`${actionVerb} th√†nh c√¥ng`).setDescription(`**${target.user.tag}** ƒë√£ b·ªã ${action}.`).addFields({ name: 'L√Ω do', value: reason }).setTimestamp(); 
                await interaction.followUp({ embeds: [embed] }); 
            } catch (error) { 
                console.error(error); 
                await interaction.followUp({ content: `ƒê√£ x·∫£y ra l·ªói khi ƒëang c·ªë ${action} th√†nh vi√™n.`, ephemeral: true }); 
            } 
        }
        else if (commandName === 'unban') {
            await interaction.deferReply(); 
            const userId = interaction.options.getString('userid');
            try {
                await interaction.guild.members.unban(userId);
                const embed = new EmbedBuilder().setColor('Green').setTitle('Unban th√†nh c√¥ng').setDescription(`ƒê√£ g·ª° ban cho ng∆∞·ªùi d√πng c√≥ ID: **${userId}**.`);
                await interaction.followUp({ embeds: [embed] }); 
            } catch (error) {
                console.error(error);
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng ki·ªÉm tra l·∫°i ID ho·∫∑c c√≥ th·ªÉ ng∆∞·ªùi d√πng n√†y kh√¥ng b·ªã ban.', ephemeral: true }); 
            }
        }
        else if (commandName === 'timeout') { 
            await interaction.deferReply(); 
            const target = interaction.options.getMember('ng∆∞·ªùi'); 
            const durationStr = interaction.options.getString('time'); 
            const reason = interaction.options.getString('reason') ?? 'Kh√¥ng c√≥ l√Ω do.'; 
            if (!target) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n.', ephemeral: true }); 
            if (target.id === interaction.user.id) return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ t·ª± timeout m√¨nh!', ephemeral: true }); 
            if (target.permissions.has(PermissionFlagsBits.Administrator)) return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ timeout m·ªôt Qu·∫£n tr·ªã vi√™n!', ephemeral: true }); 
            if (target.roles.highest.position >= interaction.member.roles.highest.position) { return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ timeout ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng b·∫°n.', ephemeral: true }); } 
            if (!target.moderatable) { return interaction.followUp({ content: 'T√¥i kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ timeout th√†nh vi√™n n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i vai tr√≤ c·ªßa t√¥i.', ephemeral: true }); } 
            const durationMs = ms(durationStr); if (!durationMs || durationMs > ms('28d')) return interaction.followUp({ content: 'Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng d√πng ƒë·ªãnh d·∫°ng nh∆∞ "10m", "1h", "2d" v√† kh√¥ng qu√° 28 ng√†y.', ephemeral: true }); 
            try { 
                await target.timeout(durationMs, reason); 
                const embed = new EmbedBuilder().setColor('Yellow').setTitle('Timeout th√†nh c√¥ng').setDescription(`**${target.user.tag}** ƒë√£ b·ªã timeout.`).addFields({ name: 'Th·ªùi gian', value: durationStr }, { name: 'L√Ω do', value: reason }).setTimestamp(); 
                await interaction.followUp({ embeds: [embed] }); 
            } catch (error) { 
                console.error(error); 
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi ƒëang c·ªë timeout th√†nh vi√™n.', ephemeral: true }); 
            } 
        }
        else if (commandName === 'untimeout') {
            await interaction.deferReply(); 
            const target = interaction.options.getMember('ng∆∞·ªùi');
            if (!target) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n.', ephemeral: true }); 
            if (target.id === interaction.user.id) return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ t·ª± g·ª° timeout cho m√¨nh!', ephemeral: true }); 
            if (target.roles.highest.position >= interaction.member.roles.highest.position) {
                return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ g·ª° timeout cho ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng b·∫°n.', ephemeral: true }); 
            }
            if (!target.moderatable) {
                return interaction.followUp({ content: 'T√¥i kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ qu·∫£n l√Ω th√†nh vi√™n n√†y.', ephemeral: true }); 
            }
            if (!target.isCommunicationDisabled()) {
                return interaction.followUp({ content: 'Th√†nh vi√™n n√†y kh√¥ng ƒëang b·ªã timeout.', ephemeral: true }); 
            }
            try {
                await target.timeout(null);
                const embed = new EmbedBuilder().setColor('Green').setTitle('G·ª° Timeout th√†nh c√¥ng').setDescription(`ƒê√£ g·ª° timeout cho **${target.user.tag}**.`);
                await interaction.followUp({ embeds: [embed] }); 
            } catch (error) {
                console.error(error);
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi ƒëang c·ªë g·ª° timeout.', ephemeral: true }); 
            }
        }
        else if (commandName === 'rename') { 
            await interaction.deferReply(); 
            const target = interaction.options.getMember('ng∆∞·ªùi'); 
            const nickname = interaction.options.getString('nickname'); 
            if (!target) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n.', ephemeral: true }); 
            if (target.roles.highest.position >= interaction.member.roles.highest.position && interaction.guild.ownerId !== interaction.user.id) return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ ƒë·ªïi t√™n ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng b·∫°n.', ephemeral: true }); 
            try { 
                const oldNickname = target.displayName; 
                await target.setNickname(nickname); 
                const embed = new EmbedBuilder().setColor('Blue').setTitle('ƒê·ªïi t√™n th√†nh c√¥ng').setDescription(`ƒê√£ ƒë·ªïi nickname c·ªßa **${target.user.tag}** t·ª´ \`${oldNickname}\` th√†nh \`${nickname}\`.`); 
                await interaction.followUp({ embeds: [embed] }); 
            } catch (error) { 
                console.error(error); 
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi ƒëang c·ªë ƒë·ªïi t√™n th√†nh vi√™n. C√≥ th·ªÉ nickname qu√° d√†i ho·∫∑c t√¥i kh√¥ng c√≥ quy·ªÅn.', ephemeral: true }); 
            } 
        }
        else if (commandName === 'move') { 
            await interaction.deferReply(); 
            const target = interaction.options.getMember('ng∆∞·ªùi'); 
            const channel = interaction.options.getChannel('channel'); 
            if (!target) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n.', ephemeral: true }); 
            if (!target.voice.channel) return interaction.followUp({ content: 'Th√†nh vi√™n n√†y kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o.', ephemeral: true }); 
            try { 
                await target.voice.setChannel(channel); 
                const embed = new EmbedBuilder().setColor('Purple').setTitle('Di chuy·ªÉn th√†nh c√¥ng').setDescription(`ƒê√£ di chuy·ªÉn **${target.user.tag}** ƒë·∫øn k√™nh tho·∫°i **${channel.name}**.`); 
                await interaction.followUp({ embeds: [embed] }); 
            } catch (error) { 
                console.error(error); 
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi ƒëang c·ªë di chuy·ªÉn th√†nh vi√™n. Vui l√≤ng ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa t√¥i.', ephemeral: true });
            } 
        }
        
        else if (commandName === 'roletemp') {
            await interaction.deferReply({ ephemeral: true });
    
            const target = interaction.options.getMember('ng∆∞·ªùi');
            const role = interaction.options.getRole('vai_tr√≤');
            const durationStr = interaction.options.getString('th·ªùi_h·∫°n');
    
            if (!target || !role) {
                return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ho·∫∑c vai tr√≤ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.' });
            }
            if (role.position >= interaction.member.roles.highest.position && interaction.guild.ownerId !== interaction.user.id) {
                return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ g√°n vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng vai tr√≤ cao nh·∫•t c·ªßa b·∫°n.' });
            }
            if (role.position >= interaction.guild.members.me.roles.highest.position) {
                return interaction.followUp({ content: 'T√¥i kh√¥ng th·ªÉ qu·∫£n l√Ω vai tr√≤ n√†y v√¨ n√≥ cao h∆°n ho·∫∑c b·∫±ng vai tr√≤ cao nh·∫•t c·ªßa t√¥i.' });
            }
            if (role.managed || role.id === interaction.guild.id) {
                return interaction.followUp({ content: 'T√¥i kh√¥ng th·ªÉ g√°n vai tr√≤ n√†y (do ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi bot kh√°c ho·∫∑c l√† vai tr√≤ @everyone).' });
            }
            if (target.roles.cache.has(role.id)) {
                return interaction.followUp({ content: 'Th√†nh vi√™n n√†y ƒë√£ c√≥ vai tr√≤ ƒë√≥ r·ªìi.' });
            }
    
            const durationMs = ms(durationStr);
            if (!durationMs || durationMs <= 0) {
                return interaction.followUp({ content: 'Th·ªùi h·∫°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng nh∆∞ "10m", "1h", "7d".' });
            }
            
            const maxTimeoutDays = 24;
            const maxTimeoutMs = maxTimeoutDays * 24 * 60 * 60 * 1000;
            if (durationMs > maxTimeoutMs) {
                return interaction.followUp({ content: `Th·ªùi h·∫°n qu√° d√†i! T√¥i ch·ªâ c√≥ th·ªÉ h·∫πn gi·ªù g·ª° vai tr√≤ trong t·ªëi ƒëa ${maxTimeoutDays} ng√†y.` });
            }
    
            const expiresAt = Date.now() + durationMs;

            try {
                await target.roles.add(role);

                const stmt = db.prepare(`INSERT INTO temp_roles (userId, guildId, roleId, expiresAt) VALUES (?, ?, ?, ?)`);
                stmt.run(target.id, interaction.guild.id, role.id, expiresAt);
                
                setTimeout(() => removeTempRole(target.id, interaction.guild.id, role.id), durationMs);

                const embed = new EmbedBuilder()
                    .setColor('Green')
                    .setTitle('‚úÖ G√°n vai tr√≤ t·∫°m th·ªùi th√†nh c√¥ng')
                    .setDescription(`ƒê√£ g√°n vai tr√≤ ${role} cho ${target} trong th·ªùi h·∫°n **${durationStr}**. D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u.`)
                    .setTimestamp()
                    .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` });
                
                await interaction.followUp({ embeds: [embed] });
    
            } catch (error) {
                console.error('L·ªói chi ti·∫øt khi g√°n vai tr√≤ t·∫°m th·ªùi:', error); 
                await interaction.followUp({ content: `**ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng g√°n vai tr√≤:**\n\`\`\`${error.message}\`\`\`\nƒê√¢y l√† l·ªói t·ª´ ph√≠a Discord, h√£y ch·∫Øc ch·∫Øn bot c√≥ ƒë·ªß quy·ªÅn v√† vai tr√≤ c·ªßa bot cao h∆°n vai tr√≤ c·∫ßn g√°n.` });
            }
        }

        else if (commandName === 'unroletemp') {
            await interaction.deferReply({ ephemeral: true });
    
            const target = interaction.options.getMember('ng∆∞·ªùi');
            const role = interaction.options.getRole('vai_tr√≤');
    
            if (!target || !role) {
                return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ho·∫∑c vai tr√≤ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.' });
            }
            if (!target.roles.cache.has(role.id)) {
                return interaction.followUp({ content: 'Th√†nh vi√™n n√†y kh√¥ng c√≥ vai tr√≤ ƒë√≥.' });
            }
    
            await removeTempRole(target.id, interaction.guild.id, role.id);
            
            const embed = new EmbedBuilder()
                .setColor('Red')
                .setTitle('‚úÖ G·ª° vai tr√≤ t·∫°m th·ªùi th√†nh c√¥ng')
                .setDescription(`ƒê√£ g·ª° vai tr√≤ ${role} kh·ªèi ${target} ngay l·∫≠p t·ª©c.`)
                .setTimestamp()
                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` });
            await interaction.followUp({ embeds: [embed] });
        }
        else if (commandName === 'ticketsetup') {
            await interaction.deferReply({ ephemeral: true });
            const tieuDe = interaction.options.getString('tieu_de');
            const moTa = interaction.options.getString('mo_ta').replace(/\\n/g, '\n');
            const content = interaction.options.getString('content');
            const hinhAnh = interaction.options.getString('hinh_anh');
            const bannerUrl = interaction.options.getString('anh_banner');
            const mauSac = interaction.options.getString('mau_sac');

            if (bannerUrl) {
                try {
                    await interaction.channel.send({
                        files: [bannerUrl]
                    });
                } catch (error) {
                    console.error("L·ªói khi g·ª≠i ·∫£nh banner", error);
                    await interaction.followUp({ content: '‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ g·ª≠i ·∫£nh banner. Vui l√≤ng ki·ªÉm tra l·∫°i URL.' });
                }
            }

            const ticketEmbed = new EmbedBuilder()
                .setTitle(tieuDe)
                .setDescription(moTa);
                
            if (mauSac) ticketEmbed.setColor(mauSac);
            if (hinhAnh) ticketEmbed.setImage(hinhAnh);

            const openButton = new ButtonBuilder()
                .setCustomId('show_ticket_options')
                .setLabel('M·ªü Ticket 2.0')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('<:Email37:1412322372790255636>');
            
            const row = new ActionRowBuilder().addComponents(openButton);

            const messagePayload = {
                embeds: [ticketEmbed],
                components: [row]
            };
            if (content) {
                messagePayload.content = content;
            }
            await interaction.channel.send(messagePayload);

            if (!bannerUrl){
                await interaction.followUp({ content: 'ƒê√£ c√†i ƒë·∫∑t th√†nh c√¥ng b·∫£ng ƒëi·ªÅu khi·ªÉn ticket v·ªõi ch·ª©c nƒÉng ch·ªçn danh m·ª•c.' });
            } else {
                await interaction.editReply({ content: 'ƒê√£ c√†i ƒë·∫∑t th√†nh c√¥ng b·∫£ng ƒëi·ªÅu khi·ªÉn ticket v√† banner.' });
            }
        }
        else if (commandName === 'formsetup') {
            await interaction.deferReply({ ephemeral: true });
            const tieuDe = interaction.options.getString('tieu_de');
            const moTa = interaction.options.getString('mo_ta').replace(/\\n/g, '\n');
            const content = interaction.options.getString('content');
            const hinhAnh = interaction.options.getString('hinh_anh');
            const mauSac = interaction.options.getString('mau_sac');
            const kenhNhanForm = interaction.options.getChannel('kenh_nhan_form');
            const feedbackChannelId = kenhNhanForm ? kenhNhanForm.id : DEFAULT_FEEDBACK_CHANNEL_ID;

            const formEmbed = new EmbedBuilder().setTitle(tieuDe).setDescription(moTa);
            if (mauSac) formEmbed.setColor(mauSac);
            if (hinhAnh) formEmbed.setImage(hinhAnh);

            const openFormButton = new ButtonBuilder().setCustomId(`open_feedback_form_${feedbackChannelId}`).setLabel('H·ªó Tr·ª£').setStyle(ButtonStyle.Danger).setEmoji('<:email49:1412322374891602020>');
            const row = new ActionRowBuilder().addComponents(openFormButton);
            
            const messagePayload = {
                embeds: [formEmbed],
                components: [row]
            };
            if (content) {
                messagePayload.content = content;
            }
            await interaction.channel.send(messagePayload);

            await interaction.followUp({ content: 'ƒê√£ c√†i ƒë·∫∑t th√†nh c√¥ng b·∫£ng ƒëi·ªÅu khi·ªÉn form.' });
        }

        else if (commandName === 'warn') {
             await interaction.deferReply({ ephemeral: true });
    
             const target = interaction.options.getMember('ng∆∞·ªùi');
             const reason = interaction.options.getString('l√Ω_do');
             const destination = interaction.options.getString('n∆°i_g·ª≠i');
     
             if (!target) {
                 return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y.' });
             }
             if (target.id === interaction.user.id) {
                 return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ t·ª± c·∫£nh c√°o ch√≠nh m√¨nh!' });
             }
             if (target.permissions.has(PermissionFlagsBits.Administrator)) {
                 return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ c·∫£nh c√°o m·ªôt Qu·∫£n tr·ªã vi√™n!' });
             }
             if (target.roles.highest.position >= interaction.member.roles.highest.position && interaction.guild.ownerId !== interaction.user.id) {
                 return interaction.followUp({ content: 'B·∫°n kh√¥ng th·ªÉ c·∫£nh c√°o ng∆∞·ªùi c√≥ vai tr√≤ cao h∆°n ho·∫∑c b·∫±ng b·∫°n.' });
             }
             
             if (destination === 'dm') {
                 const warnEmbedDM = new EmbedBuilder()
                     .setColor('Yellow')
                     .setTitle('<:PridecordWarning:1412665674026717207> B·∫°n ƒë√£ nh·∫≠n m·ªôt c·∫£nh c√°o')
                     .setDescription(`B·∫°n ƒë√£ nh·∫≠n m·ªôt c·∫£nh c√°o trong server **${interaction.guild.name}**.`)
                     .addFields(
                         { name: 'Ng∆∞·ªùi c·∫£nh c√°o', value: interaction.user.tag, inline: true },
                         { name: 'L√Ω do', value: reason }
                     )
                     .setTimestamp()
                     .setFooter({ text: `H√£y tu√¢n th·ªß n·ªôi quy c·ªßa server.` });
 
                 try {
                     await target.send({ embeds: [warnEmbedDM] });
                     await interaction.followUp({ content: `‚úÖ ƒê√£ g·ª≠i c·∫£nh c√°o ƒë·∫øn ${target.user.tag} qua tin nh·∫Øn ri√™ng.` });
                 } catch (error) {
                     console.error("L·ªói khi g·ª≠i DM c·∫£nh c√°o:", error);
                     await interaction.followUp({ content: `‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ri√™ng cho ng∆∞·ªùi d√πng n√†y. H·ªç c√≥ th·ªÉ ƒë√£ ch·∫∑n bot ho·∫∑c t·∫Øt tin nh·∫Øn ri√™ng.` });
                 }
             } else {
                 const publicWarnEmbed = new EmbedBuilder()
                     .setColor('Yellow')
                     .setTitle('<:PridecordWarning:1412665674026717207> Th√†nh vi√™n ƒë√£ b·ªã c·∫£nh c√°o')
                     .addFields(
                         { name: 'Ng∆∞·ªùi b·ªã c·∫£nh c√°o', value: target.toString(), inline: true },
                         { name: 'Ng∆∞·ªùi th·ª±c hi·ªán', value: interaction.user.toString(), inline: true },
                         { name: 'L√Ω do', value: reason }
                     )
                     .setTimestamp();
                 
                 await interaction.channel.send({ embeds: [publicWarnEmbed] });
                 await interaction.followUp({ content: '‚úÖ ƒê√£ g·ª≠i c·∫£nh c√°o c√¥ng khai trong k√™nh n√†y.' });
             }
        }
        else if (commandName === 'resettickets') {
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return interaction.reply({ content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.', ephemeral: true });
            }
            db.prepare(`UPDATE settings SET value = ? WHERE key = ?`).run('1', 'ticketCounter');
            await interaction.reply({ content: '‚úÖ ƒê√£ reset s·ªë ƒë·∫øm ticket v·ªÅ l·∫°i 1 trong database.', ephemeral: true });
        }
        else if (commandName === 'warnings') {
            await interaction.deferReply();
            const target = interaction.options.getMember('ng∆∞·ªùi');
            if (!target) {
                return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y.', ephemeral: true });
            }

            const row = db.prepare('SELECT COUNT(*) as count FROM warnings WHERE userId = ? AND guildId = ?').get(target.id, interaction.guild.id);
            const warnCount = row ? row.count : 0;

            const embed = new EmbedBuilder()
                .setColor('Blue')
                .setDescription(`${target} hi·ªán c√≥ **${warnCount}** c·∫£nh c√°o.`)
                .setAuthor({ name: target.user.tag, iconURL: target.user.displayAvatarURL() });

            await interaction.followUp({ embeds: [embed] });
        }
        else if (commandName === 'resetwarnings') {
            await interaction.deferReply({ ephemeral: true });
            const target = interaction.options.getMember('ng∆∞·ªùi');
            if (!target) {
                return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†y.', ephemeral: true });
            }

            db.prepare('DELETE FROM warnings WHERE userId = ? AND guildId = ?').run(target.id, interaction.guild.id);

            await interaction.followUp({ content: `‚úÖ ƒê√£ x√≥a to√†n b·ªô c·∫£nh c√°o cho ${target}.` });
        }

        else if (commandName === 'level') {
            const targetUser = interaction.options.getUser('user') || user;
            const userData = getUserStats(targetUser.id, guild.id);

            const currentLevel = userData.level;
            const xpForCurrentLevel = 50 * currentLevel * (currentLevel + 1);
            const xpForNextLevel = 50 * (currentLevel + 1) * (currentLevel + 2);
            const neededProgress = xpForNextLevel - xpForCurrentLevel;
            const currentProgress = userData.xp - xpForCurrentLevel;
    
            const percentage = Math.max(0, Math.min(100, (currentProgress / neededProgress) * 100));
            const progressBar = '‚ñà'.repeat(Math.floor(percentage / 10)) + '‚îÄ'.repeat(10 - Math.floor(percentage / 10));
            
            const rankEmbed = new EmbedBuilder()
                .setColor('Random')
                .setAuthor({ name: `Th√¥ng tin level c·ªßa ${targetUser.username}`, iconURL: targetUser.displayAvatarURL() })
                .setThumbnail(targetUser.displayAvatarURL())
                .addFields(
                    { name: 'üåü Level', value: `**${userData.level}**`, inline: true },
                    { name: 'üìà T·ªïng XP', value: `**${userData.xp}**`, inline: true },
                    { name: 'üìä Ti·∫øn tr√¨nh', value: `\`${progressBar}\`\n**${currentProgress}** / **${neededProgress}** XP` }
                );
            await interaction.reply({ embeds: [rankEmbed] });
        }
    
        else if (commandName === 'daily') {
            if (interaction.member.roles.cache.has(NO_XP_ROLE_ID)) {
                return interaction.reply({ content: 'B·∫°n ƒëang c√≥ vai tr√≤ kh√¥ng nh·∫≠n XP n√™n kh√¥ng th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.', ephemeral: true });
            }
            const userData = getUserStats(user.id, guild.id);
            const cooldown = 24 * 60 * 60 * 1000;
            const timeSinceLastDaily = Date.now() - userData.lastDaily;
    
            if (timeSinceLastDaily < cooldown) {
                const timeLeft = cooldown - timeSinceLastDaily;
                return interaction.reply({ content: `B·∫°n c·∫ßn ch·ªù **${ms(timeLeft, { long: true })}** n·ªØa ƒë·ªÉ nh·∫≠n th∆∞·ªüng daily.`, ephemeral: true });
            }
            
            const oldLevel = userData.level;
            const { newLevel } = updateUserXP(user.id, guild.id, userData.xp + DAILY_REWARD);
            db.prepare('UPDATE user_stats SET lastDaily = ? WHERE id = ?').run(Date.now(), `${user.id}-${guild.id}`);
    
            await interaction.reply(`üéâ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${DAILY_REWARD} XP** t·ª´ th∆∞·ªüng daily!`);
            if (newLevel > oldLevel) {
                await interaction.followUp(`üéâ Ch√∫c m·ª´ng ${user}, b·∫°n ƒë√£ l√™n **Level ${newLevel}**!`);
            }
        }
    
        else if (commandName === 'leaderboard') {
            await interaction.deferReply();
            const topUsers = db.prepare('SELECT * FROM user_stats WHERE guildId = ? ORDER BY xp DESC LIMIT 10').all(guild.id);
    
            if (topUsers.length === 0) {
                return interaction.followUp('Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng c·∫£.');
            }
    
            const leaderboardDescription = await Promise.all(
                topUsers.map(async (u, index) => {
                    const member = await guild.members.fetch(u.userId).catch(() => null);
                    const username = member ? member.user.username : `*Ng∆∞·ªùi d√πng ƒë√£ r·ªùi ƒëi*`;
                    return `**${index + 1}.** ${username} - **Level ${u.level}** (${u.xp} XP)`;
                })
            );
    
            const lbEmbed = new EmbedBuilder()
                .setTitle(`üèÜ B·∫£ng X·∫øp H·∫°ng Level - ${guild.name}`)
                .setDescription(leaderboardDescription.join('\n'))
                .setColor('Gold');
            await interaction.followUp({ embeds: [lbEmbed] });
        }
        
        else if (commandName === 'add-xp') {
            const targetUser = interaction.options.getUser('user');
            const amount = interaction.options.getInteger('amount');
            const userData = getUserStats(targetUser.id, guild.id);
            const finalXp = userData.xp + amount;
            const { newLevel } = updateUserXP(targetUser.id, guild.id, finalXp);
            await interaction.reply({ content: `‚úÖ ƒê√£ c·ªông **${amount} XP** cho ${targetUser}. H·ªç hi·ªán ·ªü **Level ${newLevel}** v·ªõi **${finalXp} XP**.`, ephemeral: true });
        }
    
        else if (commandName === 'remove-xp') {
            const targetUser = interaction.options.getUser('user');
            const amount = interaction.options.getInteger('amount');
            const userData = getUserStats(targetUser.id, guild.id);
            const finalXp = Math.max(0, userData.xp - amount);
            const { newLevel } = updateUserXP(targetUser.id, guild.id, finalXp);
            await interaction.reply({ content: `‚úÖ ƒê√£ tr·ª´ **${amount} XP** c·ªßa ${targetUser}. H·ªç hi·ªán ·ªü **Level ${newLevel}** v·ªõi **${finalXp} XP**.`, ephemeral: true });
        }
    
        else if (commandName === 'set-level') {
            const targetUser = interaction.options.getUser('user');
            const level = interaction.options.getInteger('level');
            const requiredXp = 50 * level * (level + 1);
            updateUserXP(targetUser.id, guild.id, requiredXp);
            await interaction.reply({ content: `‚úÖ ƒê√£ thi·∫øt l·∫≠p ${targetUser} th√†nh **Level ${level}** v·ªõi **${requiredXp} XP**.`, ephemeral: true });
        }
        
        else if (commandName === 'giveaway') {
            const subcommand = interaction.options.getSubcommand();
            
            if (subcommand === 'start') {
                await interaction.deferReply({ ephemeral: true });

                const durationStr = interaction.options.getString('duration');
                const winnerCount = interaction.options.getInteger('winners');
                const prize = interaction.options.getString('prize');
                const channel = interaction.options.getChannel('channel') || interaction.channel;

                const durationMs = ms(durationStr);
                if (!durationMs || durationMs <= 0) {
                    return interaction.followUp({ content: 'Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng d√πng ƒë·ªãnh d·∫°ng nh∆∞ "10m", "1h", "2d".' });
                }

                const endsAt = Date.now() + durationMs;

                const giveawayEmbed = new EmbedBuilder()
                    .setColor('Aqua')
                    .setTitle('üéâ GIVEAWAY üéâ')
                    .setDescription(
                        `**Gi·∫£i th∆∞·ªüng:** ${prize}\n` +
                        `**S·ªë ng∆∞·ªùi th·∫Øng:** ${winnerCount}\n` +
                        `**K·∫øt th√∫c:** <t:${Math.floor(endsAt / 1000)}:R>\n` +
                        `**T·ªï ch·ª©c b·ªüi:** ${interaction.user}\n\n` +
                        `React v·ªõi üéâ ƒë·ªÉ tham gia!`
                    )
                    .setTimestamp(endsAt)
                    .setFooter({ text: 'Giveaway s·∫Ω k·∫øt th√∫c v√†o l√∫c' });

                try {
                    const message = await channel.send({ embeds: [giveawayEmbed] });
                    await message.react('üéâ');

                    db.prepare('INSERT INTO giveaways (messageId, channelId, guildId, prize, winnerCount, endsAt, hostedBy) VALUES (?, ?, ?, ?, ?, ?, ?)')
                      .run(message.id, channel.id, guild.id, prize, winnerCount, endsAt, user.id);

                    setTimeout(() => endGiveaway(message.id), durationMs);

                    await interaction.followUp({ content: `‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu giveaway t·∫°i k√™nh ${channel}!` });
                } catch (error) {
                    console.error('L·ªói khi b·∫Øt ƒë·∫ßu giveaway:', error);
                    await interaction.followUp({ content: 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng ki·ªÉm tra quy·ªÅn c·ªßa bot t·∫°i k√™nh ƒë√≥.' });
                }
            }
            else if (subcommand === 'reroll') {
                await interaction.deferReply({ ephemeral: true });
                const messageId = interaction.options.getString('message_id');
                const giveaway = db.prepare('SELECT * FROM giveaways WHERE messageId = ? AND ended = 1').get(messageId);

                if (!giveaway) {
                    return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y giveaway ƒë√£ k·∫øt th√∫c v·ªõi ID n√†y.' });
                }

                const channel = client.channels.cache.get(giveaway.channelId);
                if (!channel) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y k√™nh c·ªßa giveaway.' });

                try {
                    const message = await channel.messages.fetch(messageId);
                    const reaction = message.reactions.cache.get('üéâ');
                    if (!reaction) return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y reaction tr√™n tin nh·∫Øn giveaway.' });

                    const users = await reaction.users.fetch();
                    const oldWinnersString = message.embeds[0].description.split('Ng∆∞·ªùi th·∫Øng: ')[1];
                    const oldWinnerIds = oldWinnersString.match(/<@(\d+)>/g).map(tag => tag.slice(2, -1));
                    
                    const participants = users.filter(u => !u.bot && !oldWinnerIds.includes(u.id)).map(u => u.id);

                    if (participants.length < giveaway.winnerCount) {
                        return interaction.followUp({ content: 'Kh√¥ng ƒë·ªß ng∆∞·ªùi tham gia m·ªõi ƒë·ªÉ ch·ªçn l·∫°i.' });
                    }

                    const newWinners = [];
                     for (let i = 0; i < giveaway.winnerCount; i++) {
                        if (participants.length === 0) break;
                        const winnerIndex = Math.floor(Math.random() * participants.length);
                        newWinners.push(participants.splice(winnerIndex, 1)[0]);
                    }
                    
                    const newWinnerTags = newWinners.map(id => `<@${id}>`).join(', ');
                    await interaction.followUp({ content: `ƒê√£ ch·ªçn l·∫°i ng∆∞·ªùi th·∫Øng! Ch√∫c m·ª´ng ${newWinnerTags}!` });
                    await channel.send(`üîÑ Ng∆∞·ªùi th·∫Øng m·ªõi cho **${giveaway.prize}** l√† ${newWinnerTags}! Ch√∫c m·ª´ng!`);

                } catch (error) {
                    console.error("L·ªói khi reroll giveaway:", error);
                    await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng reroll.' });
                }
            }
            else if (subcommand === 'end') {
                await interaction.deferReply({ ephemeral: true });
                const messageId = interaction.options.getString('message_id');
                const giveaway = db.prepare('SELECT * FROM giveaways WHERE messageId = ? AND ended = 0').get(messageId);
                
                if (!giveaway) {
                    return interaction.followUp({ content: 'Kh√¥ng t√¨m th·∫•y giveaway ƒëang ho·∫°t ƒë·ªông v·ªõi ID n√†y.' });
                }

                // H·ªßy l·ªãch h·∫πn c≈© v√† k·∫øt th√∫c ngay
                const runningTimeout = client.timeouts.find(t => t._call.args[0] === messageId);
                if(runningTimeout) clearTimeout(runningTimeout);

                await endGiveaway(messageId);
                await interaction.followUp({ content: '‚úÖ ƒê√£ k·∫øt th√∫c giveaway th√†nh c√¥ng.' });
            }
        }
    }

    if (interaction.isStringSelectMenu()) {
        if (interaction.customId === 'select_ticket_category') {
            await interaction.deferReply({ ephemeral: true });

            const selectedValue = interaction.values[0];
            let categoryId;
            let ticketType;
            let welcomeMessage;
            let ticketContent;

            switch (selectedValue) {
                case 'technical_support':
                    categoryId = SUPPORT_TICKET_CATEGORY_ID;
                    ticketType = 'h·ªó-tr·ª£';
                    welcomeMessage = `H·ªó tr·ª£ b·∫°n v·ªÅ v·∫•n ƒë·ªÅ **K·ªπ thu·∫≠t/Chung**. Vui l√≤ng tr√¨nh b√†y chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i.`;
                    ticketContent = `## **Ch√†o ${interaction.user}, Ph√∫c s·∫Ω c√≥ m·∫∑t ngay ƒë·ªÉ h·ªó tr·ª£**`
                    break;
                case 'admin_contact':
                    categoryId = ADMIN_TICKET_CATEGORY_ID;
                    ticketType = 'admin';
                    welcomeMessage = `**C·∫ßn alo ngay em Ph√∫c**`;
                    ticketContent = `## **Ch√†o ${interaction.user}, b·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ g√¨ ho·∫∑c khi·∫øu n·∫°i th√¨ c·ª© ghi v√†o nh√©**`
                    break;
                default:
                    return interaction.followUp({ content: 'L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.' });
            }

            let ticketCounter = parseInt(db.prepare(`SELECT value FROM settings WHERE key = ?`).get('ticketCounter').value);
            const ticketChannelName = `${ticketType}-${ticketCounter}`;

            try {
                const ticketChannel = await interaction.guild.channels.create({
                    name: ticketChannelName,
                    type: ChannelType.GuildText,
                    parent: categoryId,
                    permissionOverwrites: [
                        { id: interaction.guild.id, deny: [PermissionFlagsBits.ViewChannel] },
                        { id: interaction.user.id, allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] },
                        { id: SUPPORT_ROLE_ID, allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages] }
                    ],
                });

                ticketCounter++;
                db.prepare(`UPDATE settings SET value = ? WHERE key = ?`).run(ticketCounter.toString(), 'ticketCounter');

                const ticketWelcomeEmbed = new EmbedBuilder()
                    .setColor('#57F287')
                    .setTitle(`Ticket ${ticketType.charAt(0).toUpperCase() + ticketType.slice(1)}`)
                    .setDescription(`Ch√†o ${interaction.user}, c·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá.\n\nƒê·ªôi ng≈© <@&${SUPPORT_ROLE_ID}> s·∫Ω ${welcomeMessage}`)
                    .setTimestamp();
                const closeButton = new ButtonBuilder().setCustomId('close_ticket').setLabel('ƒê√≥ng Ticket').setStyle(ButtonStyle.Danger).setEmoji('<:close51:1413054667021352960>');
                const row = new ActionRowBuilder().addComponents(closeButton);
                await ticketChannel.send({ content: ticketContent, embeds: [ticketWelcomeEmbed], components: [row] });

                await interaction.followUp({ content: `ƒê√£ t·∫°o ticket c·ªßa b·∫°n t·∫°i ${ticketChannel}.` });

            } catch (error) {
                console.error("L·ªói khi t·∫°o ticket theo danh m·ª•c:", error);
                await interaction.followUp({ content: 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c ID Category ƒë√£ khai b√°o v√† quy·ªÅn c·ªßa bot.' });
            }
        }
    }
});

const messageCooldown = new Set();
client.on('messageCreate', async message => {
    if (message.author.bot || !message.guild) return;

    if (NO_XP_ROLE_ID && message.member.roles.cache.has(NO_XP_ROLE_ID)) {
        return; 
    }

    if (!messageCooldown.has(message.author.id)) {
        const userStats = getUserStats(message.author.id, message.guild.id);
        const oldLevel = userStats.level;
        const { newLevel } = updateUserXP(userStats.userId, userStats.guildId, userStats.xp + XP_PER_MESSAGE);
        
        if (newLevel > oldLevel) {
            message.channel.send(`üéâ Ch√∫c m·ª´ng ${message.author}, b·∫°n ƒë√£ l√™n **Level ${newLevel}**!`).catch(console.error);
        }
        
        messageCooldown.add(message.author.id);
        setTimeout(() => {
            messageCooldown.delete(message.author.id);
        }, MESSAGE_COOLDOWN_SECONDS * 1000);
    }
    
    if (message.member && message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        return;
    }

    const messageContent = message.content.toLowerCase();
    const hasForbiddenWord = FORBIDDEN_WORDS.some(word => messageContent.includes(word));

    if (hasForbiddenWord) {
        try {
            await message.delete();
        } catch (error) {
            console.error("Auto-Mod: Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn.", error);
        }

        const reason = 'S·ª≠ d·ª•ng ng√¥n t·ª´ kh√¥ng ph√π h·ª£p (T·ª± ƒë·ªông b·ªüi Bot).';
        const timestamp = Date.now();
        
        try {
            const stmt = db.prepare('INSERT INTO warnings (userId, guildId, reason, timestamp) VALUES (?, ?, ?, ?)');
            stmt.run(message.author.id, message.guild.id, reason, timestamp);
        } catch (dbError) {
            console.error("L·ªói khi ghi c·∫£nh c√°o v√†o DB:", dbError);
            return;
        }
        
        const row = db.prepare('SELECT COUNT(*) as count FROM warnings WHERE userId = ? AND guildId = ?').get(message.author.id, message.guild.id);
        const warnCount = row ? row.count : 0;

        const logChannel = await message.guild.channels.fetch(MOD_LOG_CHANNEL_ID).catch(() => null);

        switch (warnCount) {
            case 1:
                try {
                    const dmEmbed = new EmbedBuilder()
                        .setColor('Yellow')
                        .setTitle(`C·∫£nh c√°o l·∫ßn 1 t·∫°i ${message.guild.name}`)
                        .setDescription(`B·∫°n ƒë√£ b·ªã c·∫£nh c√°o v√¨ l√Ω do: **${reason}**.\n\nH√£y tu√¢n th·ªß n·ªôi quy c·ªßa server.`)
                        .setTimestamp();
                    await message.author.send({ embeds: [dmEmbed] });
                } catch (error) {
                     console.log(`Kh√¥ng th·ªÉ DM c·∫£nh c√°o cho ${message.author.tag}`);
                }

                const warningMessage = await message.channel.send(`${message.author}, b·∫°n ƒë√£ b·ªã c·∫£nh c√°o l·∫ßn 1 v√¨ s·ª≠ d·ª•ng ng√¥n t·ª´ kh√¥ng ph√π h·ª£p. Vui l√≤ng ki·ªÉm tra tin nh·∫Øn ri√™ng ƒë·ªÉ bi·∫øt chi ti·∫øt.`);
                setTimeout(() => warningMessage.delete().catch(console.error), 10000);

                if (logChannel) {
                    const logEmbed = new EmbedBuilder()
                        .setColor('Yellow')
                        .setTitle('Auto-Mod: C·∫£nh C√°o')
                        .addFields(
                            { name: 'Th√†nh vi√™n', value: `${message.author} (${message.author.tag})`, inline: true },
                            { name: 'H√†nh ƒë·ªông', value: 'C·∫£nh c√°o (L·∫ßn 1)', inline: true },
                            { name: 'T·ªïng c·∫£nh c√°o', value: `${warnCount}`, inline: true },
                            { name: 'L√Ω do', value: reason }
                        )
                        .setTimestamp();
                    logChannel.send({ embeds: [logEmbed] });
                }
                break;
            case 2:
                try {
                    if (message.member.moderatable) {
                        const durationMs = ms(TIMEOUT_DURATION);
                        await message.member.timeout(durationMs, reason);

                        const dmEmbed = new EmbedBuilder()
                            .setColor('Orange')
                            .setTitle(`B·∫°n ƒë√£ b·ªã Timeout t·∫°i ${message.guild.name}`)
                            .setDescription(`B·∫°n ƒë√£ b·ªã timeout **${TIMEOUT_DURATION}** v√¨ t√°i ph·∫°m.\n**L√Ω do:** ${reason}\n\n‚ö†Ô∏è **ƒê√¢y l√† c·∫£nh c√°o l·∫ßn 2. Vi ph·∫°m l·∫ßn n·ªØa s·∫Ω d·∫´n ƒë·∫øn b·ªã Ban vƒ©nh vi·ªÖn.**`)
                            .setTimestamp();
                        await message.author.send({ embeds: [dmEmbed] });

                        if (logChannel) {
                             const logEmbed = new EmbedBuilder()
                                .setColor('Orange')
                                .setTitle('Auto-Mod: Timeout')
                                .addFields(
                                    { name: 'Th√†nh vi√™n', value: `${message.author} (${message.author.tag})`, inline: true },
                                    { name: 'H√†nh ƒë·ªông', value: `Timeout ${TIMEOUT_DURATION} (L·∫ßn 2)`, inline: true },
                                    { name: 'T·ªïng c·∫£nh c√°o', value: `${warnCount}`, inline: true },
                                    { name: 'L√Ω do', value: reason }
                                )
                                .setTimestamp();
                            logChannel.send({ embeds: [logEmbed] });
                        }
                    } else {
                        if (logChannel) logChannel.send(`‚ö†Ô∏è **Auto-Mod L·ªói:** Kh√¥ng th·ªÉ timeout ${message.author} do thi·∫øu quy·ªÅn.`);
                    }
                } catch (error) {
                    console.error("Auto-Mod: L·ªói khi timeout", error);
                }
                break;
            default:
                if (warnCount >= 3) {
                    try {
                         if (message.member.bannable) {
                            const dmEmbed = new EmbedBuilder()
                                .setColor('Red')
                                .setTitle(`B·∫°n ƒë√£ b·ªã Ban vƒ©nh vi·ªÖn kh·ªèi ${message.guild.name}`)
                                .setDescription(`B·∫°n ƒë√£ b·ªã ban vƒ©nh vi·ªÖn v√¨ vi ph·∫°m l·∫ßn th·ª© 3.\n**L√Ω do:** ${reason}`)
                                .setTimestamp();
                            await message.author.send({ embeds: [dmEmbed] }).catch(() => console.log(`Kh√¥ng th·ªÉ DM th√¥ng b√°o ban cho ${message.author.tag}`));
    
                            await message.member.ban({ reason });
    
                             if (logChannel) {
                                 const logEmbed = new EmbedBuilder()
                                    .setColor('Red')
                                    .setTitle('Auto-Mod: Ban vƒ©nh vi·ªÖn')
                                    .addFields(
                                        { name: 'Th√†nh vi√™n', value: `${message.author} (${message.author.tag})`, inline: true },
                                        { name: 'H√†nh ƒë·ªông', value: 'Ban vƒ©nh vi·ªÖn (L·∫ßn 3+)', inline: true },
                                        { name: 'T·ªïng c·∫£nh c√°o', value: `${warnCount}`, inline: true },
                                        { name: 'L√Ω do', value: reason }
                                    )
                                    .setTimestamp();
                                logChannel.send({ embeds: [logEmbed] });
                            }
                        } else {
                             if (logChannel) logChannel.send(`‚ö†Ô∏è **Auto-Mod L·ªói:** Kh√¥ng th·ªÉ ban ${message.author} do thi·∫øu quy·ªÅn.`);
                        }
                    } catch (error) {
                        console.error("Auto-Mod: L·ªói khi ban", error);
                    }
                }
                break;
        }
    }
});

client.on('voiceStateUpdate', (oldState, newState) => {
    // --- LOGIC C·ªòNG XP KHI ·ªû K√äNH THO·∫†I ---
    const userId = newState.id;
    const guildId = newState.guild.id;

    if (newState.member.user.bot && newState.id !== client.user.id) return; // B·ªè qua c√°c bot kh√°c

    // T·ª± ƒë·ªông r·ªùi k√™nh n·∫øu k√™nh tr·ªëng
    if (oldState.channelId && oldState.channel.members.size === 1 && oldState.channel.members.has(client.user.id)) {
        const serverQueue = queue.get(oldState.guild.id);
        if (serverQueue) {
            serverQueue.connection.destroy();
            queue.delete(oldState.guild.id);
            serverQueue.textChannel.send('M·ªçi ng∆∞·ªùi ƒë√£ r·ªùi ƒëi, t√¥i c≈©ng ƒëi ƒë√¢y. H·∫πn g·∫∑p l·∫°i!');
        }
    }


    if (newState.member.user.bot) return; // B·ªè qua logic XP cho bot
    
    if (NO_XP_ROLE_ID && newState.member.roles.cache.has(NO_XP_ROLE_ID)) {
        return;
    }

    const isJoining = (!oldState.channelId && newState.channelId);
    if (isJoining) {
        getUserStats(userId, guildId); // ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng c√≥ trong DB
        db.prepare('UPDATE user_stats SET voiceJoinTimestamp = ? WHERE userId = ? AND guildId = ?').run(Date.now(), userId, guildId);
    } 
    
    const isLeaving = (oldState.channelId && !newState.channelId);
    if (isLeaving) {
        const user = getUserStats(userId, guildId);
        if (user.voiceJoinTimestamp > 0) {
            const durationMs = Date.now() - user.voiceJoinTimestamp;
            const durationMinutes = Math.floor(durationMs / 60000);

            if (durationMinutes > 0) {
                const xpGained = durationMinutes * XP_PER_MINUTE_IN_VOICE;
                const oldLevel = user.level;
                const { newLevel } = updateUserXP(user.userId, user.guildId, user.xp + xpGained);

                if (newLevel > oldLevel) {
                    const channel = newState.guild.systemChannel;
                    if (channel) {
                        channel.send(`üéâ Ch√∫c m·ª´ng ${newState.member}, b·∫°n ƒë√£ l√™n **Level ${newLevel}** nh·ªù tham gia k√™nh tho·∫°i!`).catch(console.error);
                    }
                }
            }
            db.prepare('UPDATE user_stats SET voiceJoinTimestamp = 0 WHERE userId = ? AND guildId = ?').run(userId, guildId);
        }
    }
});

client.login(process.env.DISCORD_TOKEN);

client.on('guildMemberAdd', async member => {
    if (member.user.bot) return;

    const channel = member.guild.channels.cache.get(WELCOME_CHANNEL_ID);
    if (channel) {
        const welcomeImages = [
            'https://i.pinimg.com/originals/c2/ce/2d/c2ce2d82a11c90b05ad4abd796ef2fff.gif',
            'https://giffiles.alphacoders.com/203/203432.gif',
            'https://gifsec.com/wp-content/uploads/2022/09/welcome-gif-24.gif',
            'https://i.pinimg.com/originals/8d/ac/4f/8dac4f8274a9ef0381d12b0ca30e1956.gif'
        ];
        const randomImage = welcomeImages[Math.floor(Math.random() * welcomeImages.length)];

        const welcomeEmbed = new EmbedBuilder()
            .setColor('#57F287')
            .setTitle(`üéâ Ch√†o m·ª´ng th√†nh vi√™n m·ªõi! üéâ`)
            .setDescription(
                `Ch√†o m·ª´ng con v·ª£ ${member} ƒë√£ h·∫° c√°nh xu·ªëng server!\n\n` +
                `ƒê·ª´ng qu√™n gh√© qua 2 channel n√†y nh√© <#${CHAT_CHANNEL_ID}> & <#${SUPPORT_CHANNEL_ID}>\n\n` +
                `Hy v·ªçng con v·ª£ s·∫Ω c√≥ nh·ªØng gi√¢y ph√∫t vui v·∫ª v√† tuy·ªát v·ªùi t·∫°i ƒë√¢y.`
            )
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
            .setImage(randomImage)
            .setTimestamp()
            .setFooter({ text: `Hi·ªán t·∫°i server c√≥ ${member.guild.memberCount} th√†nh vi√™n.` });

        try {
            await channel.send({ 
                content: `<@&${SUPPORT_ROLE_ID}> ∆°i, c√≥ th√†nh vi√™n m·ªõi ${member} n√®!`,
                embeds: [welcomeEmbed] 
            });
        } catch (error) {
            console.error("L·ªói khi g·ª≠i tin nh·∫Øn ch√†o m·ª´ng:", error);
        }
    }

    if (AUTO_ROLE_ID) {
        try {
            const role = member.guild.roles.cache.get(AUTO_ROLE_ID);
            if (role) {
                await member.roles.add(role);
                console.log(`ƒê√£ g√°n vai tr√≤ "${role.name}" cho ${member.user.tag}.`);
            } else {
                 console.log(`Kh√¥ng t√¨m th·∫•y vai tr√≤ t·ª± ƒë·ªông v·ªõi ID: ${AUTO_ROLE_ID}`);
            }
        } catch (error) {
            console.error(`L·ªói khi t·ª± ƒë·ªông g√°n vai tr√≤ cho ${member.user.tag}:`, error);
        }
    }
});

client.on('guildMemberRemove', async member => {
    if (member.partial) {
        try {
            await member.fetch();
        } catch (error) {
            console.error('L·ªói khi fetch th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa th√†nh vi√™n ƒë√£ r·ªùi ƒëi:', error);
            const channel = member.guild.channels.cache.get(GOODBYE_CHANNEL_ID);
            if(channel) await channel.send(`M·ªôt th√†nh vi√™n v·ªõi ID: ${member.id} ƒë√£ r·ªùi kh·ªèi server.`);
            return;
        }
    }

    if (member.user.bot) return;

    const channel = member.guild.channels.cache.get(GOODBYE_CHANNEL_ID);
    if (!channel) {
        console.log(`L·ªói: Kh√¥ng t√¨m th·∫•y k√™nh t·∫°m bi·ªát v·ªõi ID: ${GOODBYE_CHANNEL_ID}`);
        return;
    }

    try {
        const goodbyeEmbed = new EmbedBuilder()
            .setColor('#FF474D')
            .setTitle(`üëã M·ªôt th√†nh vi√™n ƒë√£ r·ªùi ƒëi üëã`)
            .setDescription(`**${member.user.tag}** ƒë√£ r·ªùi kh·ªèi server. H·∫πn g·∫∑p l·∫°i!`)
            .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
            .setImage(GOODBYE_GIF_URL)
            .setTimestamp()
            .setFooter({ text: `Hi·ªán t·∫°i server c√≤n l·∫°i ${member.guild.memberCount} th√†nh vi√™n.` });

        await channel.send({ embeds: [goodbyeEmbed] });
    } catch (error) {
        console.error("L·ªói khi t·∫°o ho·∫∑c g·ª≠i tin nh·∫Øn t·∫°m bi·ªát:", error);
    }
});
